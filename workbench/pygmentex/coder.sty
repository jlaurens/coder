%%
%% This is file `coder.sty',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% coder.dtx  (with options: `sty')
%% coder --- code inlined in a LuaLaTeX document.
%% version: v2.6a
%% date: 2020-11-23
%% E-mail: jerome.laurens@u-bourgogne.fr
%% Released under the LaTeX Project Public License v1.3c or later
%% 
%% Copyright (C) 2022 by Jérôme LAURENS <jerome.laurens@u-bourgogne.fr>
%% 
%% This work may be distributed and/or modified under the
%% conditions of the LaTeX Project Public License (LPPL), either
%% version 1.3c of this license or (at your option) any later
%% version.  The latest version of this license is in the file:
%% 
%% http://www.latex-project.org/lppl.txt
%% 
%% This work is "maintained" (as per LPPL maintenance status) by
%% Jérôme LAURENS.
%% 
%% This work consists of the file  coder.dtx
%% and the derived files           coder.ins,
%%                                 coder.pdf,
%%                                 coder-util.lua,
%%                                 coder-tool.py and
%%                                 coder.sty.
%% 
\RequirePackage{fancyvrb}
\RequirePackage{color}
\RequirePackage{emoji}
\RequirePackage{ifthen}


\RequirePackage{luacode, needspace, xcolor, verbatim}
\AddToHook { begindocument / before } {
  \RequirePackage{datetime2}
}
\def\CDRFileDate{2022/02/07}
\def\CDRFileVersion{2022/02/07}
\ProvidesExplPackage{coder}
  {\CDRFileDate}
  {\CDRFileVersion}
  {code inlined in documents}

\NeedsTeXFormat{LaTeX2e}

\msg_new:nnn { coder } { :n } { #1 }
\cs_if_exist:NTF\IfFormatAtLeastTF {
  \IfFormatAtLeastTF{2021/06/01} {} {
    \msg_fatal:nnn { coder } { :n } { Please~update~LaTeX.~Emergency~stop }
  }
} {
  \msg_fatal:nnn { coder } { :n } { Please~update~LaTeX.~Emergency~stop }
}
\lua_now:n { CDR = require("coder-util") }

\makeatletter
\NewDocumentCommand \CDRTest {} {
  \sys_if_shell:TF {
    \CDR_has_pygments:F {
      \msg_warning:nnn
        { coder }
        { :n }
        { No~"pygmentize"~found. }
    }
  } {
    \msg_warning:nnn
      { coder }
      { :n }
      { No~unrestricted~shell~escape~for~"pygmentize".}
  }
}
\msg_new:nnn { coder } { unknown-choice } {
  #1~given~value~`#3'~not~in~#2
}
\str_const:Nn \c_CDR_Tags { CDR@Tags }
\str_const:Nx \c_CDR_tag { \c_CDR_Tags/tag }
\str_const:Nn \c_CDR_tag_get { CDR@tag@get }
\bool_new:N \l_CDR_bool
\tl_new:N \l_CDR_tl
\str_new:N \l_CDR_str
\seq_new:N \l_CDR_seq
\prop_new:N \l_CDR_prop
\clist_new:N \l_CDR_clist
\ior_new:N \l_CDR_ior
\iow_new:N \l_CDR_iow
\int_new:N \g_CDR_source_int
\prop_new:N \g_CDR_source_prop
\tl_new:N \g_CDR_chunks_tl
\tl_new:N \l_CDR_chunks_tl
\prop_new:N \g_CDR_vars
\tl_new:N \g_CDR_hook_tl
\clist_new:N \l_CDR_kv_clist
\tl_new:N \l_CDR_opts_tl
\tl_new:N \l_CDR_recorded_tl
\tl_new:N \l_CDR_count_tl
\int_new:N \g_CDR_int
\tl_new:N \l_CDR_line_tl
\tl_new:N \l_CDR_lineno_tl
\tl_new:N \l_CDR_name_tl
\tl_new:N \l_CDR_info_tl
\cs_new:Npn \CDR_int_new:cn #1 #2 {
  \int_new:c { g_CDR@int.#1 }
  \int_gset:cn { g_CDR@int.#1 } { #2 }
}
\CDR_int_new:cn { default } { 1 }
\CDR_int_new:cn { __ } { 1 }
\cs_new:Npn \CDR_int:c #1 {
  \use:c { g_CDR@int.#1 }
}
\cs_new:Npn \CDR_int_use:c #1 {
  \int_use:c { g_CDR@int.#1 }
}
\prg_new_conditional:Nnn \CDR_int_if_exist:c { p, T, F, TF } {
  \int_if_exist:cTF { g_CDR@int.#1 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\prg_new_conditional:Nnn \CDR_int_compare:cNn { p, T, F, TF } {
  \int_compare:nNnTF { \CDR_int:c { #1 } } #2 { #3 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\cs_new:Npn \CDR_int_set:cn #1 #2 {
  \int_set:cn { g_CDR@int.#1 } { #2 }
}
\cs_new:Npn \CDR_int_gset:cn #1 #2 {
  \int_gset:cn { g_CDR@int.#1 } { #2 }
}
\cs_new:Npn \CDR_int_set:cc #1 #2 {
  \CDR_int_set:cn { #1 } { \CDR_int:c { #2 } }
}
\cs_new:Npn \CDR_int_gset:cc #1 #2 {
  \CDR_int_gset:cn { #1 } { \CDR_int:c { #2 } }
}
\cs_new:Npn \CDR_int_add:cn #1 #2 {
  \int_add:cn { g_CDR@int.#1 } { #2 }
}
\cs_new:Npn \CDR_int_gadd:cn #1 #2 {
  \int_gadd:cn { g_CDR@int.#1 } { #2 }
}
\cs_new:Npn \CDR_int_add:cc #1 #2 {
  \CDR_int_add:cn { #1 } { \CDR_int:c { #2 } }
}
\cs_new:Npn \CDR_int_gadd:cc #1 #2 {
  \CDR_int_gadd:cn { #1 } { \CDR_int:c { #2 } }
}
\cs_new:Npn \CDR_int_sub:cn #1 #2 {
  \int_sub:cn { g_CDR@int.#1 } { #2 }
}
\cs_new:Npn \CDR_int_gsub:cn #1 #2 {
  \int_gsub:cn { g_CDR@int.#1 } { #2 }
}
\cs_new:Npn \CDR_tag_get_path:cc #1 #2 {
  \c_CDR_tag_get @ #1 / #2
}
\cs_new:Npn \CDR_tag_get_path:c {
  \CDR_tag_get_path:cc { __local }
}
\cs_new_protected:Npn \CDR_tag_set:ccn #1 #2 #3 {
  \cs_set:cpn { \CDR_tag_get_path:cc { #1 } { #2 } } { \exp_not:n { #3 } }
}
\cs_new_protected:Npn \CDR_tag_set:ccV #1 #2 #3 {
  \exp_args:NnnV
  \CDR_tag_set:ccn { #1 } { #2 } #3
}
\tl_set:Nn \l_CDR_tl { /([^/]*)/(.*)$ } \use_none:n { $ }
\tl_put_left:NV \l_CDR_tl \c_CDR_tag
\tl_put_left:Nn \l_CDR_tl { ^ }
\exp_args:NNV
\regex_const:Nn \c_CDR_tag_regex \l_CDR_tl
\cs_new_protected:Npn \CDR_tag_set:n {
  \exp_args:NnV
  \regex_extract_once:NnNTF \c_CDR_tag_regex
      \l_keys_path_str \l_CDR_seq {
    \CDR_tag_set:ccn
      { \seq_item:Nn \l_CDR_seq 2 }
      { \seq_item:Nn \l_CDR_seq 3 }
  } {
    \PackageWarning
      { coder }
      { Unexpected~key~path~`\l_keys_path_str' }
    \use_none:n
  }
}
\cs_new_protected:Npn \CDR_tag_set: {
  \exp_args:NV
  \CDR_tag_set:n \l_keys_value_tl
}
\cs_new:Npn \CDR_tag_set:cn #1 {
  \exp_args:NnV
  \regex_extract_once:NnNTF \c_CDR_tag_regex
      \l_keys_path_str \l_CDR_seq {
    \CDR_tag_set:ccn
      { \seq_item:Nn \l_CDR_seq 2 }
      { #1 }
  } {
    \PackageWarning
      { coder }
      { Unexpected~key~path~`\l_keys_path_str' }
    \use_none:n
  }
}
\prg_generate_conditional_variant:Nnn \str_if_eq:nn { fn, VV } { p, T, F, TF }

\regex_const:Nn \c_CDR_root_regex { ^(.*)/.*$ } \use_none:n { $ }
\cs_new:Npn \CDR_tag_choices: {
  \str_if_eq:nnT \l_keys_key_tl \l_keys_choice_tl {
    \exp_args:NnV
    \regex_extract_once:NnNT \c_CDR_root_regex
        \l_keys_path_str \l_CDR_seq {
      \str_set:Nx \l_keys_path_str {
        \seq_item:Nn \l_CDR_seq 2
      }
    }
  }
}
\cs_new_protected:Npn \CDR_tag_choices_set: {
  \CDR_tag_choices:
  \exp_args:NV
  \CDR_tag_set:n \l_keys_choice_tl
}
\prg_new_conditional:Nnn \CDR_tag_if_truthy:cc { p, T,  F, TF } {
  \exp_args:Ne
  \str_compare:nNnTF {
    \exp_args:Ne \str_lowercase:n { \CDR_tag_get:cc { #1 } { #2 } }
  } = { true } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\prg_new_conditional:Nnn \CDR_tag_if_truthy:c { p, T,  F, TF } {
  \exp_args:Ne
  \str_compare:nNnTF {
    \exp_args:Ne \str_lowercase:n { \CDR_tag_get:c { #1 } }
  } = { true } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\prg_new_conditional:Nnn \CDR_tag_if_eq:ccn { p, T,  F, TF } {
  \exp_args:Nf
  \str_compare:nNnTF { \CDR_tag_get:cc { #1 } { #2 } } = { #3 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\prg_new_conditional:Nnn \CDR_tag_if_eq:cn { p, T,  F, TF } {
  \exp_args:Nf
  \str_compare:nNnTF { \CDR_tag_get:cc { __local } { #1 } } = { #2 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\prg_new_conditional:Nnn \CDR_if_truthy:n { p, T,  F, TF } {
  \exp_args:Ne
  \str_compare:nNnTF { \exp_args:Ne \str_lowercase:n { #1 } } = { true } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\cs_new_protected:Npn \CDR_tag_boolean_set:n #1 {
  \CDR_if_truthy:nTF { #1 } {
    \CDR_tag_set:n { true }
  } {
    \CDR_tag_set:n { false }
  }
}
\cs_generate_variant:Nn \CDR_tag_boolean_set:n { x }
\prg_new_conditional:Nnn \CDR_tag_if_exist_here:cc { p, T, F, TF } {
  \cs_if_exist:cTF { \CDR_tag_get_path:cc { #1 } { #2 } } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\prg_new_conditional:Nnn \CDR_tag_if_exist:cc { p, T, F, TF } {
  \cs_if_exist:cTF { \CDR_tag_get_path:cc { #1 } { #2 } } {
    \prg_return_true:
  } {
    \seq_if_exist:cTF { \CDR_tag_parent_seq:c { #1 } } {
      \seq_map_tokens:cn
        { \CDR_tag_parent_seq:c { #1 } }
        { \CDR_tag_if_exist_f:cn { #2 } }
    } {
      \prg_return_false:
    }
  }
}
\prg_new_conditional:Nnn \CDR_tag_if_exist:c { p, T, F, TF } {
  \cs_if_exist:cTF { \CDR_tag_get_path:c { #1 } } {
    \prg_return_true:
  } {
    \seq_if_exist:cTF { \CDR_tag_parent_seq:c { __local } } {
      \seq_map_tokens:cn
        { \CDR_tag_parent_seq:c { __local } }
        { \CDR_tag_if_exist_f:cn { #1 } }
    } {
      \prg_return_false:
    }
  }
}
\cs_new:Npn \CDR_tag_if_exist_f:cn #1 #2 {
  \quark_if_no_value:nTF { #2 } {
    \seq_map_break:n {
      \prg_return_false:
    }
  } {
    \CDR_tag_if_exist:ccT { #2 } { #1 } {
      \seq_map_break:n {
        \prg_return_true:
      }
    }
  }
}
\cs_new:Npn \CDR_tag_get:cc #1 #2 {
  \CDR_tag_if_exist_here:ccTF { #1 } { #2 } {
    \use:c { \CDR_tag_get_path:cc { #1 } { #2 } }
  } {
    \seq_if_exist:cT { \CDR_tag_parent_seq:c { #1 } } {
      \seq_map_tokens:cn
        { \CDR_tag_parent_seq:c { #1 } }
        { \CDR_tag_get_f:cn { #2 } }
    }
  }
}
\cs_new:Npn \CDR_tag_get_f:cn #1 #2 {
  \quark_if_no_value:nF { #2 } {
    \CDR_tag_if_exist_here:ccT { #2 } { #1 } {
      \seq_map_break:n {
        \use:c { \CDR_tag_get_path:cc { #2 } { #1 } }
      }
    }
  }
}
\cs_new:Npn \CDR_tag_get:c {
  \CDR_tag_get:cc { __local }
}
\cs_new_protected:Npn \CDR_tag_get:ccN #1 #2 #3 {
  \tl_set:Nf #3 { \CDR_tag_get:cc { #1 } { #2 } }
}
\cs_new_protected:Npn \CDR_tag_get:cN {
  \CDR_tag_get:ccN { __local }
}
\prg_new_protected_conditional:Nnn \CDR_tag_get:ccN { T, F, TF } {
  \CDR_tag_if_exist:ccTF { #1 } { #2 } {
    \CDR_tag_get:ccN { #1 } { #2 } #3
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\prg_new_protected_conditional:Nnn \CDR_tag_get:cN { T, F, TF } {
  \CDR_tag_if_exist:cTF { #1 } {
    \CDR_tag_get:cN { #1 } #2
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\cs_new:Npn \CDR_tag_parent_seq:c #1 {
  g_CDR:parent.tag @ #1 _seq
}
\cs_new:Npn \CDR_tag_inherit:cn #1 #2 {
  \seq_set_from_clist:cn { \CDR_tag_parent_seq:c { #1 } } { #2 }
  \seq_remove_duplicates:c \l_CDR_tl
  \seq_remove_all:cn \l_CDR_tl {}
  \seq_put_right:cn \l_CDR_tl { \q_no_value }
}
\cs_new:Npn \CDR_tag_inherit:cf {
  \exp_args:Nnf \CDR_tag_inherit:cn
}
\cs_new:Npn \CDR_tag_inherit:cV {
  \exp_args:NnV \CDR_tag_inherit:cn
}
\AddToHook { begindocument/before } {
  \IfFileExists {./\jobname.aux} {} {
   \lua_now:n {CDR:cache_clean_all()}
  }
}
\AddToHook { enddocument/end } {
  \lua_now:n {CDR:cache_clean_unused()}
}
\cs_new:Npn \CDR_clist_map_inline:Nnn #1 #2 {
  \clist_if_empty:NTF #1 {
    #2
    \use_none:n
  } {
    \clist_map_inline:Nn #1
  }
}
\prg_new_conditional:Nnn \CDR_if_block: { p, T, F, TF } {
  \PackageError
    { coder }
    { Conditional~not~available }
}
\cs_new:Npn \CDR_process_record: {}
\cs_generate_variant:Nn \keys_define:nn { Vn, xn }
\cs_new:Npn \CDR_tag_keys_define:nn #1 {
  \keys_define:xn { \c_CDR_tag / \exp_not:n { #1 } }
}
\cs_generate_variant:Nn \CDR_tag_keys_define:nn { nx }
\cs_new:Npn \CDR_tag_keys_set:nn #1 {
  \exp_args:Nx
  \keys_set:nn { \c_CDR_tag / \exp_not:n { #1 } }
}
\cs_generate_variant:Nn \CDR_tag_keys_set:nn { nV }
\cs_new:Npn \CDR_keys_set_known:nnN #1 #2 {
  \keys_set_known:nnnN { #1 } { #2 } { #1 }
}
\cs_generate_variant:Nn \CDR_keys_set_known:nnN { x, VV }
\cs_new:Npn \CDR_keys_inherit__:nnn #1 #2 #3 {
  \keys_define:nn { #1 } { #2 .inherit:n = { #3 } }
}
\cs_new:Npn \CDR_keys_inherit:nnn #1 #2 #3 {
  \tl_if_empty:nTF { #1 } {
    \CDR_keys_inherit__:nnn { } { #2 } { #3 }
  } {
    \clist_set:Nn \l_CDR_clist { #3 }
    \exp_args:Nnnx
    \CDR_keys_inherit__:nnn { #1 } { #2 } {
      #1 / \clist_use:Nn \l_CDR_clist { ,#1/ }
    }
  }
}
\cs_generate_variant:Nn \CDR_keys_inherit:nnn { VnV, Vnn }
\cs_generate_variant:Nn \keys_set_known:nnnN { VVV, nVx }
\cs_new:Npn \CDR_tag_keys_set_known:nnN #1 {
  \CDR_keys_set_known:xnN { \c_CDR_tag / \exp_not:n { #1 } }
}
\cs_generate_variant:Nn \CDR_tag_keys_set_known:nnN { nV }
\tl_set:Nn \l_CDR_tl { /([^/]*)(?:/(.*))?$ } \use_none:n { $ }
\tl_put_left:NV \l_CDR_tl \c_CDR_tag
\tl_put_left:Nn \l_CDR_tl { ^ }
\exp_args:NNV
\regex_const:Nn \c_CDR_provide_regex \l_CDR_tl
\regex_const:Nn \c_CDR_engine_regex { ^[^/]*\sengine\soptions$ } \use_none:n { $ }
\cs_new:Npn \CDR_tag_provide_from_clist:n #1 {
  \exp_args:NNx
  \regex_extract_once:NnNTF \c_CDR_provide_regex {
    \c_CDR_Tags / #1
  } \l_CDR_seq {
    \tl_set:Nx \l_CDR_tl { \seq_item:Nn \l_CDR_seq 3 }
    \exp_args:Nx
    \clist_map_inline:nn {
      \seq_item:Nn \l_CDR_seq 2
    } {
      \exp_args:NV
      \keys_if_exist:nnF \c_CDR_tag { ##1 } {
        \CDR_keys_inherit:Vnn \c_CDR_tag { ##1 } {
          __pygments, __pygments.block,
          default.block, default.code, default,
          __fancyvrb, __fancyvrb.block, __fancyvrb.all
        }
        \keys_define:Vn \c_CDR_tag {
          ##1 .code:n = \CDR_tag_keys_set:nn { ##1 } { ####1 },
          ##1 .value_required:n = true,
        }
      }
      \exp_args:NxV
      \keys_if_exist:nnF { \c_CDR_tag / ##1 } \l_CDR_tl {
        \exp_args:NNV
        \regex_match:NnT \c_CDR_engine_regex
            \l_CDR_tl {
          \CDR_tag_keys_define:nx { ##1 } {
            \l_CDR_tl .code:n = \exp_not:n { \CDR_tag_set:n { ####1 } },
            \l_CDR_tl .value_required:n = true,
          }
        }
      }
    }
  } {
    \regex_match:NnT \c_CDR_engine_regex { #1 } {
      \CDR_tag_keys_define:nn { default } {
        #1 .code:n = \CDR_tag_set:n { ##1 },
        #1 .value_required:n = true,
      }
    }
  }
}
\cs_new:Npn \CDR_tag_provide_from_clist:nn #1 #2 {
  \CDR_tag_provide_from_clist:n { #1 }
}
\cs_new:Npn \CDR_tag_provide_from_kv:n {
  \keyval_parse:nnn {
    \CDR_tag_provide_from_clist:n
  } {
    \CDR_tag_provide_from_clist:nn
  }
}
\cs_generate_variant:Nn \CDR_tag_provide_from_kv:n { V }
\sys_get_shell:nnN {which~pygmentize} {} \l_CDR_tl
\prg_new_conditional:Nnn \CDR_has_pygments: { p, T, F, TF } { }
\tl_if_in:NnTF \l_CDR_tl { pygmentize } {
  \prg_set_conditional:Nnn \CDR_has_pygments: { p, T, F, TF } {
    \prg_return_true:
  }
} {
  \prg_set_conditional:Nnn \CDR_has_pygments: { p, T, F, TF } {
    \prg_return_false:
  }
}
\CDR_tag_keys_define:nn { __pygments } {
  lang .code:n = \CDR_tag_set:,
  lang .value_required:n = true,
  pygments .code:n = \CDR_tag_boolean_set:x { #1 },
  pygments .default:n = true,
  style .code:n = \CDR_tag_set:,
  style .value_required:n = true,
  commandprefix .code:n = \CDR_tag_set:,
  commandprefix .value_required:n = true,
  mathescape .code:n = \CDR_tag_boolean_set:x { #1 },
  mathescape .default:n = true,
  escapeinside .code:n = \CDR_tag_set:,
  escapeinside .value_required:n = true,
  __initialize .meta:n = {
    lang = tex,
    pygments = \CDR_has_pygments:TF { true } { false },
    style=default,
    commandprefix=PY,
    mathescape=false,
    escapeinside=,
  },
  __initialize .value_forbidden:n = true,
}
\AtBeginDocument{
  \CDR_tag_keys_set:nn { __pygments } { __initialize }
}
\CDR_tag_keys_define:nn { __pygments.block } {
  texcomments .code:n = \CDR_tag_boolean_set:x { #1 },
  texcomments .default:n = true,
  __initialize .meta:n = {
    texcomments=false,
  },
  __initialize .value_forbidden:n = true,
}
\AtBeginDocument{
  \CDR_tag_keys_set:nn { __pygments.block } { __initialize }
}
\CDR_tag_keys_define:nn { default } {
  format .code:n = \CDR_tag_set:,
  format .value_required:n = true,
  cache .code:n = \CDR_tag_boolean_set:x { #1 },
  cache .default:n = true,
  debug .code:n = \CDR_tag_boolean_set:x { #1 },
  debug .default:n = true,
  post~processor .code:n = \CDR_tag_set:,
  post~processor .value_required:n = true,
  parskip .code:n = \CDR_tag_set:,
  parskip .value_required:n = true,
  engine .code:n = \CDR_tag_set:,
  engine .value_required:n = true,
  default~engine~options .code:n = \CDR_tag_set:,
  default~engine~options .value_required:n = true,
  __initialize .meta:n = {
    format = ,
    cache = true,
    debug = false,
    post~processor = ,
    parskip = \the\parskip,
    engine = default,
    default~engine~options = ,
  },
  __initialize .value_forbidden:n = true,
}
\AtBeginDocument{
  \CDR_tag_keys_set:nn { default } { __initialize }
}
\CDR_tag_keys_define:nn { default.code } {
  __initialize .meta:n = {
  },
  __initialize .value_forbidden:n = true,
}
\AtBeginDocument{
  \CDR_tag_keys_set:nn { default.code } { __initialize }
}
\CDR_tag_keys_define:nn { default.block } {
  tags .code:n = {
    \clist_set:Nn \l_CDR_clist { #1 }
    \clist_remove_duplicates:N \l_CDR_clist
    \exp_args:NV
    \CDR_tag_set:n \l_CDR_clist
  },
  tags .value_required:n = true,
  tags~format .code:n = \CDR_tag_set:,
  tags~format .value_required:n = true,
  numbers~format .code:n = \CDR_tag_set:,
  numbers~format .value_required:n = true,
  show~tags .choices:nn =
    { none, left, right, numbers, mirror }
    { \CDR_tag_choices_set: },
  show~tags .default:n = numbers,
  only~top .code:n = \CDR_tag_boolean_set:x { #1 },
  only~top .default:n = true,
  use~margin .code:n = \CDR_tag_boolean_set:x { #1 },
  use~margin .default:n = true,
  blockskip .code:n = \CDR_tag_set:,
  blockskip .value_required:n = true,
  __initialize .meta:n = {
    tags = ,
    show~tags = numbers,
    only~top = true,
    use~margin = true,
    numbers~format = {
      \sffamily
      \scriptsize
      \color{gray}
    },
    tags~format = {
      \bfseries
    },
    blockskip = \topsep,
  },
  __initialize .value_forbidden:n = true,
}
\AtBeginDocument{
  \CDR_tag_keys_set:nn { default.block } { __initialize }
}
\CDR_tag_keys_define:nn { __fancyvrb } {
  formatcom .code:n = \CDR_tag_set:,
  formatcom .value_required:n = true,
  fontfamily .code:n = \CDR_tag_set:,
  fontfamily .value_required:n = true,
  fontsize .code:n = \CDR_tag_set:,
  fontsize .value_required:n = true,
  fontshape .code:n = \CDR_tag_set:,
  fontshape .value_required:n = true,
  fontseries .code:n = \CDR_tag_set:,
  fontseries .value_required:n = true,
  showspaces .code:n = \CDR_tag_boolean_set:x { #1 },
  showspaces .default:n = true,
  showtabs .code:n = \CDR_tag_boolean_set:x { #1 },
  showtabs .default:n = true,
  obeytabs .code:n = \CDR_tag_boolean_set:x { #1 },
  obeytabs .default:n = true,
  tabsize .code:n = \CDR_tag_set:,
  tabsize .value_required:n = true,
  defineactive .code:n = \CDR_tag_set:,
  defineactive .value_required:n = true,
  reflabel .code:n = \CDR_tag_set:,
  reflabel .value_required:n = true,
  __initialize .meta:n = {
    formatcom = ,
    fontfamily = tt,
    fontsize = auto,
    fontseries = auto,
    fontshape = auto,
    showspaces = false,
    showtabs = false,
    obeytabs = false,
    tabsize = 2,
    defineactive = ,
    reflabel = ,
  },
  __initialize .value_forbidden:n = true,
}
\AtBeginDocument{
  \CDR_tag_keys_set:nn { __fancyvrb } { __initialize }
}
\regex_const:Nn \c_CDR_integer_regex { ^(+|-)?\d+$ } \use_none:n { $ }
\CDR_tag_keys_define:nn { __fancyvrb.block } {
  frame .choices:nn =
    { none, leftline, topline, bottomline, lines, single }
    { \CDR_tag_choices_set: },
  framerule .code:n = \CDR_tag_set:,
  framerule .value_required:n = true,
  framesep .code:n = \CDR_tag_set:,
  framesep .value_required:n = true,
  rulecolor .code:n = \CDR_tag_set:,
  rulecolor .value_required:n = true,
  fillcolor .code:n = \CDR_tag_set:,
  fillcolor .value_required:n = true,
  label .code:n = \CDR_tag_set:,
  label .value_required:n = true,
  labelposition .choices:nn =
    { none, topline, bottomline, all }
    { \CDR_tag_choices_set: },
  baselinestretch .code:n = \CDR_tag_set:,
  baselinestretch .value_required:n = true,
  xleftmargin .code:n = \CDR_tag_set:,
  xleftmargin .value_required:n = true,
  xrightmargin .code:n = \CDR_tag_set:,
  xrightmargin .value_required:n = true,
  resetmargins .code:n = \CDR_tag_boolean_set:x { #1 },
  resetmargins .default:n = true,
  hfuzz .code:n = \CDR_tag_set:,
  hfuzz .value_required:n = true,
  samepage .code:n = \CDR_tag_boolean_set:x { #1 },
  samepage .default:n = true,
  __initialize .meta:n = {
    frame = none,
    label = ,
    labelposition = none,% auto?
    baselinestretch = auto,
    resetmargins = true,
    xleftmargin = 0pt,
    xrightmargin = 0pt,
    hfuzz = 2pt,
    samepage = false,
  },
  __initialize .value_forbidden:n = true,
}
\AtBeginDocument{
  \CDR_tag_keys_set:nn { __fancyvrb.block } { __initialize }
}
\CDR_tag_keys_define:nn { __fancyvrb.number } {
  commentchar .code:n = \CDR_tag_set:,
  commentchar .value_required:n = true,
  gobble .choices:nn = {
    0,1,2,3,4,5,6,7,8,9
  } {
    \CDR_tag_choices_set:
  },
  numbers .choices:nn =
    { none, left, right }
    { \CDR_tag_choices_set: },
  numbersep .code:n = \CDR_tag_set:,
  numbersep .value_required:n = true,
  firstnumber .code:n = {
    \regex_match:NnTF \c_CDR_integer_regex { #1 } {
      \CDR_tag_set:
    } {
      \str_case:nnF { #1 } {
        { auto } { \CDR_tag_set: }
        { last } { \CDR_tag_set: }
      } {
        \PackageWarning
          { CDR }
          { Value~`#1'~not~in~auto,~last. }
      }
    }
  },
  firstnumber .value_required:n = true,
  stepnumber .code:n = \CDR_tag_set:,
  stepnumber .value_required:n = true,
  numberblanklines .code:n = \CDR_tag_boolean_set:x { #1 },
  numberblanklines .default:n = true,
  firstline .code:n = \CDR_tag_set:,
  firstline .value_required:n = true,
  lastline .code:n = \CDR_tag_set:,
  lastline .value_required:n = true,
  __initialize .meta:n = {
    commentchar = ,
    gobble = 0,
    numbers = left,
    numbersep = 1ex,
    firstnumber = auto,
    stepnumber = 1,
    numberblanklines = true,
    firstline = ,
    lastline = ,
  },
  __initialize .value_forbidden:n = true,
}
\AtBeginDocument{
  \CDR_tag_keys_set:nn { __fancyvrb.number } { __initialize }
}
\CDR_tag_keys_define:nn { __fancyvrb.all } {
  commandchars .code:n = \CDR_tag_set:,
  commandchars .value_required:n = true,
  codes .code:n = \CDR_tag_set:,
  codes .value_required:n = true,
  __initialize .meta:n = {
    commandchars = ,
    codes = ,
  },
  __initialize .value_forbidden:n = true,
}
\AtBeginDocument{
  \CDR_tag_keys_set:nn { __fancyvrb.all } { __initialize }
}
\keys_define:nn { CDR@Set } {
  only~description .choices:nn = { false, true, {} } {
    \int_compare:nNnTF \l_keys_choice_int = 1 {
      \prg_set_conditional:Nnn \CDR_if_only_description: { p, T, F, TF } { \prg_return_true: }
    } {
      \prg_set_conditional:Nnn \CDR_if_only_description: { p, T, F, TF } { \prg_return_false: }
    }
  },
  only~description .initial:n = false,
  python~path .code:n = {
    \str_set:Nn \l_CDR_str { #1 }
    \lua_now:n { CDR:set_python_path('l_CDR_str') }
  },
}
\exp_args_generate:n { xV, nnV }
\cs_new:Npn \CDR_check_unknown:N #1 {
  \tl_if_empty:NF #1 {
    \cs_set:Npn \CDR_check_unknown:n ##1 {
      \PackageWarning
        { coder }
        { Unknow~key~`##1' }
    }
    \cs_set:Npn \CDR_check_unknown:nn ##1 ##2 {
      \CDR_check_unknown:n { ##1 }
    }
    \exp_args:NnnV
    \keyval_parse:nnn {
      \CDR_check_unknown:n
    } {
      \CDR_check_unknown:nn
    } #1
  }
}
\cs_new:Npn \CDR_set_preflight:n #1 { }
\NewDocumentCommand \CDRSet { m } {
  \CDR_set_preflight:n { #1 }
  \CDR_keys_set_known:nnN { CDR@Set } { #1 } \l_CDR_kv_clist
  \clist_map_inline:nn {
    __pygments, __pygments.block,
    default.block, default.code, default,
    __fancyvrb, __fancyvrb.block, __fancyvrb.number, __fancyvrb.all
  } {
    \CDR_tag_keys_set_known:nVN { ##1 } \l_CDR_kv_clist \l_CDR_kv_clist
  }
  \CDR_keys_set_known:VVN \c_CDR_Tags \l_CDR_kv_clist \l_CDR_kv_clist
  \CDR_tag_provide_from_kv:V \l_CDR_kv_clist
  \CDR_keys_set_known:VVN \c_CDR_Tags \l_CDR_kv_clist \l_CDR_kv_clist
  \CDR_tag_keys_set:nV { default } \l_CDR_kv_clist
  \keys_define:nn { CDR@Set@tags } {
    tags .code:n = {
      \clist_set:Nn \g_CDR_tags_clist { ##1 }
      \clist_remove_duplicates:N \g_CDR_tags_clist
    },
    unknown .code:n =,
  }
  \keys_set:nn { CDR@Set@tags } { #1 }
}
\cs_new:Npn \CDR_export_get_path:cc #1 #2 {
  CDR @ export @ get @ #1 / #2
}
\cs_new_protected:Npn \CDR_export_set:ccn #1 #2 #3 {
  \cs_set:cpn { \CDR_export_get_path:cc { #1 } { #2 } } { \exp_not:n { #3 } }
}
\cs_new_protected:Npn \CDR_export_set:Vcn #1 {
  \exp_args:NV
  \CDR_export_set:ccn { #1 }
}
\cs_new_protected:Npn \CDR_export_set:VcV #1 #2 #3 {
  \exp_args:NVnV
  \CDR_export_set:ccn #1 { #2 } #3
}
\prg_new_conditional:Nnn \CDR_export_if_exist:cc { p, T, F, TF } {
  \cs_if_exist:cTF { \CDR_export_get_path:cc { #1 } { #2 } } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\cs_new:Npn \CDR_export_get:cc #1 #2 {
  \CDR_export_if_exist:ccT { #1 } { #2 } {
    \use:c { \CDR_export_get_path:cc { #1 } { #2 } }
  }
}
\prg_new_protected_conditional:Nnn \CDR_export_get:ccN { T, F, TF } {
  \CDR_export_if_exist:ccTF { #1 } { #2 } {
    \tl_set:Nx #3 { \CDR_export_get:cc { #1 } { #2 } }
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\prop_new:N \g_CDR_export_prop
\tl_new:N \l_CDR_file_tl
\clist_new:N \g_CDR_tags_clist
\clist_new:N \g_CDR_all_tags_clist
\clist_new:N \g_CDR_last_tags_clist
\AddToHook { shipout/before } {
  \clist_gclear:N \g_CDR_last_tags_clist
}
\prop_new:N \l_CDR_export_prop
\keys_define:nn { CDR@Export } {
  file .tl_set:N = \l_CDR_file_tl,
  file .value_required:n = true,
  tags .code:n = {
    \clist_set:Nn \l_CDR_clist { #1 }
    \clist_remove_duplicates:N \l_CDR_clist
    \prop_put:NVV \l_CDR_export_prop \l_keys_key_str \l_CDR_clist
  },
  tags .value_required:n = true,
  lang .code:n = {
    \prop_put:NVn \l_CDR_export_prop \l_keys_key_str { #1 }
  },
  lang .value_required:n = true,
  preamble .code:n = {
    \prop_put:NVn \l_CDR_export_prop \l_keys_key_str { #1 }
  },
  preamble .value_required:n = true,
  postamble .code:n = {
    \prop_put:NVn \l_CDR_export_prop \l_keys_key_str { #1 }
  },
  postamble .value_required:n = true,
  raw .choices:nn = { false, true, {} } {
    \prop_put:NVx \l_CDR_export_prop \l_keys_key_str {
      \int_compare:nNnTF
        \l_keys_choice_int = 1 { false } { true }
    }
  },
  __initialize .meta:n = {
    __initialize_prop = #1,
    file=,
    tags=,
    lang=tex,
    preamble=,
    postamble=,
    raw=false,
  },
  __initialize .default:n = \l_CDR_export_prop,
  __initialize_prop .code:n = \prop_clear:N #1,
  __initialize_prop .value_required:n = true,
}
\NewDocumentCommand \CDRExport { m } {
  \keys_set:nn { CDR@Export } { __initialize }
  \keys_set:nn { CDR@Export } { #1 }
  \tl_if_empty:NTF \l_CDR_file_tl {
    \PackageWarning
      { coder }
      { Missing~key~`file' }
  } {
    \CDR_export_set:VcV \l_CDR_file_tl { file } \l_CDR_file_tl
    \prop_map_inline:Nn \l_CDR_export_prop {
      \CDR_export_set:Vcn \l_CDR_file_tl { ##1 } { ##2 }
    }
    \prop_get:NnNTF \l_CDR_export_prop { tags } \l_CDR_clist {
      \tl_if_empty:NTF \l_CDR_clist {
        \PackageWarning
          { coder }
          { Missing~key~`tags' }
      } {
        \clist_set_eq:NN \g_CDR_tags_clist \l_CDR_clist
        \clist_put_left:NV \g_CDR_all_tags_clist \l_CDR_clist
        \clist_remove_duplicates:N \g_CDR_all_tags_clist
        \CDR_export_set:VcV \l_CDR_file_tl { file } \l_CDR_file_tl
        \exp_args:NV
        \CDR_export_get:ccNT \l_CDR_file_tl { lang } \l_CDR_tl {
          \clist_map_inline:Nn \g_CDR_tags_clist {
            \CDR_tag_set:ccV { ##1 } { lang } \l_CDR_tl
          }
        }
      }
    } {
      \PackageWarning
        { coder }
        { Missing~key~`tags' }
    }
  }
}
\AddToHook { enddocument / end } {
  \prop_map_inline:Nn \g_CDR_export_prop {
    \tl_set:Nn \l_CDR_prop { #2 }
    \str_set:Nx \l_CDR_str {
      \prop_item:Nn \l_CDR_prop { file }
    }
    \lua_now:n { CDR:export_file('l_CDR_str') }
    \clist_map_inline:nn {
      tags, raw, preamble, postamble
    } {
      \str_set:Nx \l_CDR_str {
        \prop_item:Nn \l_CDR_prop { ##1 }
      }
      \lua_now:n {
        CDR:export_file_info('##1','l_CDR_str')
      }
    }
    \lua_now:n { CDR:export_file_complete() }
  }
}
\cs_set:Npn \CDR@StyleDefine #1 {
  \tl_gset:cn { g_CDR@Style/#1 }
}
\cs_set:Npn \CDR@StyleUse #1 {
  \tl_use:c { g_CDR@Style/#1 }
}
\cs_set:Npn \CDR@StyleUseTag {
  \CDR@StyleUse { \CDR_tag_get:c { style } }
}
\prg_new_conditional:Nnn \CDR@StyleIfExist:c { TF } {
  \tl_if_exist:cTF { g_CDR@Style/#1 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\cs_set_eq:NN \CDR@StyleIfExist \CDR@StyleIfExist:cTF
\cs_new:Npn \CDR_code_engine:c #1 {
  CDR@colored/code/#1:nn
}
\cs_new:Npn \CDR_block_engine:c #1 {
  CDR@colored/block/#1
}
\cs_new:Npn \CDR_code_engine:V {
  \exp_args:NV \CDR_code_engine:c
}
\cs_new:Npn \CDR_block_engine:V {
  \exp_args:NV \CDR_block_engine:c
}
\tl_new:N \l_CDR_engine_tl
\NewDocumentCommand \CDRCodeEngineNew { mm } {
  \exp_args:Nx
  \tl_if_empty:nTF { #1 } {
    \PackageWarning
      { coder }
      { The~engine~cannot~be~void. }
  } {
    \cs_new:cpn { \CDR_code_engine:c {#1} } ##1 ##2 {
      \cs_set_eq:NN \CDRGetOption \CDR_tag_get:c
      #2
    }
    \ignorespaces
  }
}
\NewDocumentCommand \CDRCodeEngineRenew { mm } {
  \exp_args:Nx
  \tl_if_empty:nTF { #1 } {
    \PackageWarning
      { coder }
      { The~engine~cannot~be~void. }
      \use_none:n
  } {
    \cs_if_exist:cTF { \CDR_code_engine:c { #1 } } {
      \cs_set:cpn { \CDR_code_engine:c { #1 } } ##1 ##2 {
        \cs_set_eq:NN \CDRGetOption \CDR_tag_get:c
        #2
      }
    } {
      \PackageWarning
        { coder }
        { No~code~engine~#1.}
    }
    \ignorespaces
  }
}
\cs_new:Npn \CDR@CodeEngineApply #1 {
  \CDR_tag_get:cN { engine } \l_CDR_engine_tl
  \CDR_if_code_engine:VF \l_CDR_engine_tl {
    \PackageError
      { coder }
      { \l_CDR_engine_tl\space code~engine~unknown,~replaced~by~'default' }
      {See~\CDRCodeEngineNew~in~the~coder~manual}
    \tl_set:Nn \l_CDR_engine_tl { default }
  }
  \CDR_tag_get:cN { engine~options } \l_CDR_opts_tl
  \tl_if_empty:NTF \l_CDR_opts_tl {
    \CDR_tag_get:cN { \l_CDR_engine_tl\space engine~options } \l_CDR_opts_tl
  } {
    \tl_put_left:Nx \l_CDR_opts_tl {
      \CDR_tag_get:c { \l_CDR_engine_tl\space engine~options } ,
    }
  }
  \exp_args:NnV
  \use:c { \CDR_code_engine:V \l_CDR_engine_tl } \l_CDR_opts_tl {
    \CDR_tag_get:c { format }
    #1
  }
}
\NewDocumentCommand \CDRBlockEngineNew { mm } {
  \NewDocumentEnvironment { \CDR_block_engine:c { #1 } } { m } {
    \cs_set_eq:NN \CDRGetOption \CDR_tag_get:c
    #2
  }
}
\NewDocumentCommand \CDRBlockEngineRenew { mm } {
  \tl_if_empty:nTF { #1 } {
    \PackageWarning
      { coder }
      { The~engine~cannot~be~void. }
      \use_none:n
  } {
    \RenewDocumentEnvironment { \CDR_block_engine:c { #1 } } { m } {
      \cs_set_eq:NN \CDRGetOption \CDR_tag_get:c
      #2
    }
  }
}
\prg_new_conditional:Nnn \CDR_if_code_engine:c { p, T, F, TF } {
  \cs_if_exist:cTF { \CDR_code_engine:c { #1 } } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\prg_new_conditional:Nnn \CDR_if_code_engine:V { p, T, F, TF } {
  \cs_if_exist:cTF { \CDR_code_engine:V #1 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\prg_new_conditional:Nnn \CDR_if_block_engine:c { p, T, F, TF } {
  \cs_if_exist:cTF { \CDR_block_engine:c { #1 } } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\prg_new_conditional:Nnn \CDR_if_block_engine:V { p, T, F, TF } {
  \cs_if_exist:cTF { \CDR_block_engine:V #1 } {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\CDRCodeEngineNew { default } { #2 }
\CDRBlockEngineNew { default } { } { }
\AtBeginDocument {
  \@ifpackageloaded{efbox} {
    \CDRCodeEngineNew {efbox} {
      \efbox[#1]{#2}%
    }
  }
}
\CDRBlockEngineNew {} {
} {
}
\cs_new:Npn \CDR@DefineSp {
  \CDR_tag_if_truthy:cTF { showspaces } {
    \cs_set:Npn \CDR@Sp {{\FancyVerbSpace}}
  } {
    \cs_set_eq:NN \CDR@Sp \space
  }
}
\tl_new:N \l_CDR_tag_tl
\CDR_tag_keys_define:nn { __code } {
  tag .tl_set:N = \l_CDR_tag_tl,
  tag .value_required:n = true,
  engine~options .code:n = \CDR_tag_set:,
  engine~options .value_required:n = true,
  __initialize .meta:n = {
    tag = default,
    engine~options = ,
  },
  __initialize .value_forbidden:n = true,
}
\cs_new:Npn \CDR_brace_if_contains_comma:n #1 {
  \tl_if_in:nnTF { #1 } { , } { { #1 } } { #1 }
}
\cs_generate_variant:Nn \CDR_brace_if_contains_comma:n { V }
\cs_new:Npn \CDR_code_format: {
  \frenchspacing
  \CDR_tag_get:cN { baselinestretch } \l_CDR_tl
  \str_if_eq:NnF \l_CDR_tl { auto } {
    \exp_args:NNV
    \def \baselinestretch \l_CDR_tl
  }
  \CDR_tag_get:cN { fontfamily } \l_CDR_tl
  \str_if_eq:NnT \l_CDR_tl { tt } { \tl_set:Nn \l_CDR_tl { lmtt } }
  \exp_args:NV
  \fontfamily \l_CDR_tl
  \clist_map_inline:nn { series, shape } {
    \CDR_tag_get:cN { font##1 } \l_CDR_tl
    \str_if_eq:NnF \l_CDR_tl { auto } {
      \exp_args:NnV
      \use:c { font##1 } \l_CDR_tl
    }
  }
  \CDR_tag_get:cN { fontsize } \l_CDR_tl
  \str_if_eq:NnF \l_CDR_tl { auto } {
    \tl_use:N \l_CDR_tl
  }
  \selectfont
}
\cs_new:Npn \CDR_code:n #1 {
  \CDR_tag_if_truthy:cTF {pygments} {
    \cs_set:Npn \CDR@StyleUseTag {
      \CDR@StyleUse { \CDR_tag_get:c { style } }
      \cs_set_eq:NN \CDR@StyleUseTag \prg_do_nothing:
    }
    \CDR_keys_inherit:Vnn \c_CDR_tag { __local } {
      __fancyvrb,
    }
    \CDR_tag_keys_set:nV { __local } \l_CDR_kv_clist
    \DefineShortVerb { #1 }
    \SaveVerb [
      aftersave = {
        \exp_args:Nx \UndefineShortVerb { #1 }
        \lua_now:n { CDR:hilight_code_setup() }
        \CDR_tag_get:cN {lang} \l_CDR_tl
        \lua_now:n { CDR:hilight_set_var('lang') }
        \CDR_tag_get:cN {cache} \l_CDR_tl
        \lua_now:n { CDR:hilight_set_var('cache') }
        \CDR_tag_get:cN {debug} \l_CDR_tl
        \lua_now:n { CDR:hilight_set_var('debug') }
        \CDR_tag_get:cN {style} \l_CDR_tl
        \lua_now:n { CDR:hilight_set_var('style') }
        \lua_now:n { CDR:hilight_set_var('source', 'FV@SV@CDR@Source') }
        \FV@UseKeyValues
        \frenchspacing
        %  \FV@SetupFont Break
        \FV@DefineWhiteSpace
        \FancyVerbDefineActive
        \FancyVerbFormatCom
        \CDR_code_format:
        \CDR@DefineSp
        \CDR_tag_get:c { format }
        \CDR@DefineSp
        \CDR@CodeEngineApply {
          \CDR@StyleIfExist { \l_CDR_tl } {
            \CDR@StyleUseTag
            \lua_now:n { CDR:hilight_source(false, true) }
          } {
            \lua_now:n { CDR:hilight_source(true, true) }
            \input { \l_CDR_pyg_sty_tl }
            \CDR@StyleUseTag
          }
          \makeatletter
          \input { \l_CDR_pyg_tex_tl }
          \makeatother
        }
        \group_end:
      }
    ] { CDR@Source } #1
  } {
    \exp_args:NV \fvset \l_CDR_kv_clist
    \DefineShortVerb { #1 }
    \SaveVerb [
      aftersave = {
        \UndefineShortVerb { #1 }
        \cs_set_eq:NN \CDR@FormattingPrep \FV@FormattingPrep
        \cs_set:Npn \FV@FormattingPrep {
          \CDR@FormattingPrep
          \CDR_tag_get:c { format }
        }
        \CDR@CodeEngineApply { \mbox {
          \FV@UseKeyValues
          \FV@FormattingPrep
          \FV@SV@CDR@Code
        } }
        \group_end:
      }
    ] { CDR@Code } #1
  }
}
\NewDocumentCommand \CDRCode { O{} } {
  \group_begin:
  \prg_set_conditional:Nnn \CDR_if_block: { p, T, F, TF } {
    \prg_return_false:
  }
  \CDR_keys_inherit:Vnn \c_CDR_tag { __local } {
    __code, default.code, __pygments, default,
  }
  \CDR_tag_keys_set_known:nnN { __local } { #1 } \l_CDR_kv_clist
  \CDR_tag_provide_from_kv:V \l_CDR_kv_clist
  \CDR_tag_keys_set_known:nVN { __local } \l_CDR_kv_clist \l_CDR_kv_clist
  \exp_args:NNV
  \def \FV@KeyValues \l_CDR_kv_clist
  \CDR_keys_inherit:Vnn \c_CDR_tag { __local } {
    __fancyvrb,
  }
  \CDR_tag_keys_set:nV { __local } \l_CDR_kv_clist
  \CDR_tag_inherit:cf { __local } {
    \tl_if_empty:NF \l_CDR_tag_tl { \l_CDR_tag_tl, }
    __code, default.code, __pygments, default, __fancyvrb,
  }
  \CDR_code:n
}
\cs_set:Npn \CDR_code:n #1 {
  \CDR_tag_if_truthy:cTF {pygments} {
    \CDR_keys_inherit:Vnn \c_CDR_tag { __local } {
      __fancyvrb,
    }
    \CDR_tag_keys_set:nV { __local } \l_CDR_kv_clist
    \DefineShortVerb { #1 }
    \SaveVerb [
      aftersave = {
        \exp_args:Nx \UndefineShortVerb { #1 }
        \lua_now:n { CDR:hilight_code_setup() }
        \CDR_tag_get:cN {lang} \l_CDR_tl
        \lua_now:n { CDR:hilight_set_var('lang') }
        \CDR_tag_get:cN {cache} \l_CDR_tl
        \lua_now:n { CDR:hilight_set_var('cache') }
        \CDR_tag_get:cN {debug} \l_CDR_tl
        \lua_now:n { CDR:hilight_set_var('debug') }
        \CDR_tag_get:cN {style} \l_CDR_tl
        \lua_now:n { CDR:hilight_set_var('style') }
        \lua_now:n { CDR:hilight_set_var('source', 'FV@SV@CDR@Source') }
        \exp_args:NNV
        \def \FV@KeyValues \l_CDR_kv_clist
        \FV@UseKeyValues
        \frenchspacing
        %  \FV@SetupFont Break
        \FV@DefineWhiteSpace
        \FancyVerbDefineActive
        \FancyVerbFormatCom
        \CDR@DefineSp
        \CDR_code_format:
        \CDR_tag_get:c { format }
        \CDR@CodeEngineApply {
          \CDR@StyleIfExist { \CDR_tag_get:c {style} } {
            \CDR@StyleUseTag
            \lua_now:n { CDR:hilight_source(false, true) }
          } {
            \lua_now:n { CDR:hilight_source(true, true) }
            \input { \l_CDR_pyg_sty_tl }
            \CDR@StyleUseTag
          }
          \makeatletter
          \input { \l_CDR_pyg_tex_tl }
          \makeatother
        }
        \group_end:
      }
    ] { CDR@Source } #1
  } {
    \DefineShortVerb { #1 }
    \SaveVerb [
      aftersave = {
        \UndefineShortVerb { #1 }
        \cs_set_eq:NN \CDR@FormattingPrep \FV@FormattingPrep
        \cs_set:Npn \FV@FormattingPrep {
          \CDR@FormattingPrep
          \CDR_tag_get:c { format }
        }
        \CDR@CodeEngineApply { A \mbox { a
          \exp_args:NNV
          \def \FV@KeyValues \l_CDR_kv_clist
          \FV@UseKeyValues
          \FV@FormattingPrep
          \@nameuse{FV@SV@CDR@Code}
        z } Z }
        \group_end:
      }
    ] { CDR@Code } #1
  }
}
\RenewDocumentCommand \CDRCode { O{} } {
  \group_begin:
  \prg_set_conditional:Nnn \CDR_if_block: { p, T, F, TF } {
    \prg_return_false:
  }
  \CDR_keys_inherit:Vnn \c_CDR_tag { __local } {
    __code, default.code, __pygments, default,
  }
  \CDR_tag_keys_set_known:nnN { __local } { #1 } \l_CDR_kv_clist
  \CDR_tag_provide_from_kv:V \l_CDR_kv_clist
  \CDR_tag_keys_set_known:nVN { __local } \l_CDR_kv_clist \l_CDR_kv_clist
  \CDR_keys_inherit:Vnn \c_CDR_tag { __local } {
    __fancyvrb,
  }
  \CDR_tag_keys_set:nV { __local } \l_CDR_kv_clist
  \CDR_tag_inherit:cf { __local } {
    \tl_if_empty:NF \l_CDR_tag_tl { \l_CDR_tag_tl, }
    __code, default.code, __pygments, default, __fancyvrb,
  }
  \fvset{showspaces}
  \CDR_code:n
}
\prop_new:N \l_CDR_block_prop
\CDR_tag_keys_define:nn { __block } {
  no~export .code:n = \CDR_tag_boolean_set:x { #1 },
  no~export .default:n = true,
  no~export~format .code:n = \CDR_tag_set:,
  no~export~format .value_required:n = true,
  test .code:n = \CDR_tag_boolean_set:x { #1 },
  test .default:n = true,
  engine~options .code:n = \CDR_tag_set:,
  engine~options .value_required:n = true,
  __initialize .meta:n = {
    no~export = false,
    no~export~format = ,
    test = false,
    engine~options = ,
  },
  __initialize .value_forbidden:n = true,
}
\clist_map_inline:nn { i, ii, iii, iv } {
  \cs_set_eq:cc { CDR@ListProcessLine@ #1 } { FV@ListProcessLine@ #1 }
}
\cs_new:Npn \CDR_process_line:n #1 {
  \str_set:Nn \l_CDR_str { #1 }
  \lua_now:n {CDR:record_line('l_CDR_str')}
}
\cs_new:Npn \CDR_block_preflight:n #1 { }
\def\FVB@CDRBlock {
  \exp_args:NV \CDR_block_preflight:n \FV@KeyValues
  \@bsphack
  \group_begin:
  \prg_set_conditional:Nnn \CDR_if_block: { p, T, F, TF } {
    \prg_return_true:
  }
  \CDR_tag_keys_set:nn { __block } { __initialize }
  \CDR_keys_inherit:Vnn \c_CDR_tag { __local } {
    __block, __pygments.block, default.block,
    __pygments, default,
  }
  \CDR_tag_keys_set_known:nVN { __local } \FV@KeyValues \l_CDR_kv_clist
  \CDR_tag_provide_from_kv:V \l_CDR_kv_clist
  \CDR_tag_keys_set_known:nVN { __local } \l_CDR_kv_clist \l_CDR_kv_clist
  \CDR_tag_inherit:cn { __local } { default.block }
  \CDR_tag_get:cN { tags } \l_CDR_clist
  \clist_if_empty:NTF \l_CDR_clist {
    \clist_if_empty:NT \g_CDR_tags_clist {
      \PackageWarning
        { coder }
        { No~(default)~tags~provided. }
    }
  } {
    \clist_gset_eq:NN \g_CDR_tags_clist \l_CDR_clist
  }
  \lua_now:n {
    CDR:hilight_block_setup('g_CDR_tags_clist')
  }
  \bool_set_false:N \l_CDR_pyg_bool
  \clist_if_empty:NTF \g_CDR_tags_clist {
    \bool_set:Nn \l_CDR_pyg_bool {
      \CDR_tag_if_truthy_p:c { pygments }
    }
  } {
    \bool_if:NF \l_CDR_pyg_bool {
      \clist_map_inline:Nn \g_CDR_tags_clist {
        \CDR_tag_if_truthy:ccT { ##1 } { pygments } {
          \clist_map_break:n {
            \bool_set_true:N \l_CDR_pyg_bool
          }
        }
      }
    }
  }
  \CDR_tag_inherit:cf { __local } {
    \g_CDR_tags_clist,
    __block, default.block, __pygments.block, __fancyvrb.block, __fancyvrb.number,
     __pygments, default, __fancyvrb,
  }
  \bool_if:NTF \l_CDR_pyg_bool {
    \CDR_keys_inherit:Vnn \c_CDR_tag { __local } {
      __fancyvrb.number
    }
    \CDR_tag_keys_set_known:nVN { __local } \l_CDR_kv_clist \l_CDR_kv_clist
    \exp_args:NV \fvset \l_CDR_kv_clist
    \CDR_keys_inherit:Vnn \c_CDR_tag { __local } {
      __fancyvrb, __fancyvrb.block
    }
    \exp_args:NnV
    \CDR_tag_keys_set:nn { __local } \l_CDR_kv_clist
    \exp_args:NNV
    \def \FV@KeyValues \l_CDR_kv_clist
    \CDR_tag_get:cN {lang} \l_CDR_tl
    \lua_now:n { CDR:hilight_set_var('lang') }
    \CDR_tag_get:cN {cache} \l_CDR_tl
    \lua_now:n { CDR:hilight_set_var('cache') }
    \CDR_tag_get:cN {debug} \l_CDR_tl
    \lua_now:n { CDR:hilight_set_var('debug') }
    \CDR_tag_get:cN {style} \l_CDR_tl
    \lua_now:n { CDR:hilight_set_var('style') }
    \CDR@StyleIfExist { \l_CDR_tl } { } {
      \lua_now:n { CDR:hilight_source(true, false) }
      \input { \l_CDR_pyg_sty_tl }
    }
    \CDR@StyleUseTag
    \CDR_tag_if_truthy:cTF {no~export} {
      \clist_map_inline:nn { i, ii, iii, iv } {
        \cs_set:cpn { FV@ListProcessLine@ ##1 } ####1 {
          \tl_set:Nn \l_CDR_tl { ####1 }
          \lua_now:n { CDR:record_line('l_CDR_tl') }
        }
      }
    } {
      \clist_map_inline:nn { i, ii, iii, iv } {
        \cs_set:cpn { FV@ListProcessLine@ ##1 } ####1 {
          \tl_set:Nn \l_CDR_tl { ####1 }
          \lua_now:n { CDR:record_line('l_CDR_tl') }
        }
      }
    }
    \CDR_tag_get:cN { engine } \l_CDR_engine_tl
    \CDR_if_code_engine:VF \l_CDR_engine_tl {
      \PackageError
        { coder }
        { \l_CDR_engine_tl\space block~engine~unknown,~replaced~by~'default' }
        {See~\CDRBlockEngineNew~in~the~coder~manual}
      \tl_set:Nn \l_CDR_engine_tl { default }
    }
    \CDR_tag_get:cN { \l_CDR_engine_tl~engine~options } \l_CDR_opts_tl
    \exp_args:NnV
    \use:c { \CDR_block_engine:V \l_CDR_engine_tl } \l_CDR_opts_tl

    \def\FV@ProcessLine ##1 {
      \tl_set:Nn \l_CDR_tl { ##1 }
      \lua_now:n { CDR:record_line('l_CDR_tl') }
    }
  } {
    \exp_args:NNV
    \def \FV@KeyValues \l_CDR_kv_clist
    \CDR_tag_if_truthy:cF {no~export} {
      \clist_map_inline:nn { i, ii, iii, iv } {
        \cs_set:cpn { FV@ListProcessLine@ ##1 } ####1 {
          \tl_set:Nn \l_CDR_tl { ####1 }
          \lua_now:n { CDR:record_line('l_CDR_tl') }
          \use:c { CDR@ListProcessLine@ ##1 } { ####1 }
        }
      }
    }
    \exp_args:NnV
    \use:c { \CDR_block_engine:V \l_CDR_engine_tl } \l_CDR_opts_tl
    \FV@VerbatimBegin
  }
  \FV@Scan
}
\def\FVE@CDRBlock {
  \bool_if:NT \l_CDR_pyg_bool {
    \CDR_tag_get:c { format }
    \fvset{ commandchars=\\\{\} }
    \CDR@DefineSp
    \FV@VerbatimBegin
    \lua_now:n { CDR:hilight_source(false, true) }
    \makeatletter
    \input{ \l_CDR_pyg_tex_tl }
    \makeatother
  }
  \FV@VerbatimEnd
  \use:c { end \CDR_block_engine:V \l_CDR_engine_tl }
  \group_end:
  \@esphack
}
\DefineVerbatimEnvironment{CDRBlock}{CDRBlock}{}

\bool_new:N \g_CDR_in_impl_bool
\prg_new_conditional:Nnn \CDR_if_show_code: { T, F, TF } {
  \bool_if:nTF {
    \g_CDR_in_impl_bool && !\g_CDR_with_impl_bool
  } {
    \prg_return_false:
  } {
    \prg_return_true:
  }
}
\bool_new:N \g_CDR_with_impl_bool
\DeclareDocumentCommand \CDRPreamble { m m } {
  \msg_info:nnn
    { coder }
    { :n }
    { Reading~preamble~from~file~"#2". }
  \group_begin:
  \tl_set:Nn \l_tmpa_tl { #2 }
  \exp_args:NNNx
  \group_end:
  \tl_set:Nx #1 { \lua_now:n {CDR.print_file_content('l_tmpa_tl')} }
}
\newcounter{CDR@impl@page}
\DeclareDocumentCommand \CDRImplementation {} {
  \bool_if:NF \g_CDR_with_impl_bool {
    \clearpage
    \bool_gset_true:N \g_CDR_in_impl_bool
    \let\CDR@old@part\part
    \DeclareDocumentCommand\part{som}{}
    \let\CDR@old@section\section
    \DeclareDocumentCommand\section{som}{}
    \let\CDR@old@subsection\subsection
    \DeclareDocumentCommand\subsection{som}{}
    \let\CDR@old@subsubsection\subsubsection
    \DeclareDocumentCommand\subsubsection{som}{}
    \let\CDR@old@paragraph\paragraph
    \DeclareDocumentCommand\paragraph{som}{}
    \let\CDR@old@subparagraph\subparagraph
    \DeclareDocumentCommand\subparagraph{som}{}
    \cs_if_exist:NT \refsection{ \refsection }
    \setcounter{ CDR@impl@page }{ \value{page} }
  }
}
\DeclareDocumentCommand\CDRFinale {} {
  \bool_if:NF \g_CDR_with_impl_bool {
    \clearpage
    \bool_gset_false:N \g_CDR_in_impl_bool
    \let\part\CDR@old@part
    \let\section\CDR@old@section
    \let\subsection\CDR@old@subsection
    \let\subsubsection\CDR@old@subsubsection
    \let\paragraph\CDR@old@paragraph
    \let\subparagraph\CDR@old@subparagraph
    \setcounter { page } { \value{ CDR@impl@page } }
  }
}
\cs_set_eq:NN \CDR_line_number: \prg_do_nothing:


\cs_new:Npn \CDRWidest (#1) #2 #3 {
  \group_begin:
  \dim_set:Nn #3 { 0pt }
  \clist_map_inline:nn { #1 } {
    \hbox_set:Nn \l_tmpa_box { #2{##1} }
    \dim_set:Nn \l_tmpa_dim { \dim_eval:n { \box_wd:N \l_tmpa_box } }
    \dim_compare:nNnT { #3 } < { \l_tmpa_dim } {
      \dim_set_eq:NN #3 \l_tm pa_dim
    }
  }
  \exp_args:NNNV
  \group_end:
  \dim_set:Nn #3 #3
}
\ExplSyntaxOff



\ExplSyntaxOn

\seq_new:N \l_CDR_records_seq


\newif\ifCDR@left
\newif\ifCDR@right



\cs_generate_variant:Nn \exp_last_unbraced:NnNo { NxNo }


\ProvideDocumentCommand\captionof{mm}{}
\def\CDR@alllinenos{(0)}

\def\FormatLineNumber#1{{\rmfamily\tiny#1}}

\newdimen\CDR@leftmargin
\newdimen\CDR@linenosep


\ExplSyntaxOff

%%
%% This is file `inlinecode.sty',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% inlinecode.dtx  (with options: `package')
%% ----------------------------------------------------------------
%% inlinecode --- code inlined in a LaTeX document.
%% E-mail: jerome.laurens@u-bourgogne.fr
%% Released under the LaTeX Project Public License v1.3c or later
%% See http://www.latex-project.org/lppl.txt
%% ----------------------------------------------------------------
%% 
\def\fileversion{v1.0}
\def\filedate{2009/10/06}
\NeedsTeXFormat{LaTeX2e}
\RequirePackage{needspace, xcolor, verbatim}
\AddToHook { begindocument / before } {
  \RequirePackage{datetime2}
}
\ProvidesExplPackage{inlinecode}
  {2022/01/21}
  {1.0a}
  {code inlined in documents}
\makeatletter
\prop_const_from_keyval:Nn \c_NLNCD_comment_prop {
  tex=\c_percent_str,
  lua=--,
  python=\c_hash_str,
  c=//,
  c++=//,
  javascript=//,
}
\prop_new:c { g/NLNCD/code/ }
\cs_new:Npn \NLNCD_item:n #1 {
  \prop_item:cn { g/NLNCD/code/ } { #1 }
}
\prg_new_conditional:Nnn \NLNCD_get:nN { T, F, TF } {
  \prop_get:cnNTF { g/NLNCD/code/ } { #1 } #2 {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\cs_new:Npn \NLNCD_item:nn #1 #2 {
  \prop_item:cn { g/NLNCD/code/#1 } { #2 }
}
\prg_new_conditional:Nnn \NLNCD_get:nnN { T, F, TF } {
  \prop_get:cnNTF { g/NLNCD/code/#1 } { #2 } #3 {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}
\cs_new:Npn \NLNCD_put:nn #1 #2 {
  \prop_put:cnn { g/NLNCD/code/ } { #1 } { #2 }
}
\cs_new:Npn \NLNCD_gput:nn #1 #2 {
  \prop_gput:cnn { g/NLNCD/code/ } { #1 } { #2 }
}
\cs_generate_variant:Nn \NLNCD_put:nn { nV }
\cs_generate_variant:Nn \NLNCD_gput:nn { nV }
\cs_new:Npn \NLNCD_put:nnn #1 #2 #3 {
  \prop_put:cnn { g/NLNCD/code/#1 } { #2 } { #3 }
}
\cs_new:Npn \NLNCD_gput:nnn #1 #2 #3 {
  \prop_gput:cnn { g/NLNCD/code/#1 } { #2 } { #3 }
}
\cs_generate_variant:Nn \NLNCD_put:nnn { nnV }
\cs_generate_variant:Nn \NLNCD_gput:nnn { nnV }
\NLNCD_gput:nn { format/code } {
  \ttfamily
}
\NLNCD_gput:nn { format/name } {
  \sffamily
  \scriptsize
  \color{gray}
}
\NLNCD_gput:nn { format/lineno } {
  \sffamily
  \tiny
  \color{gray}
}
\NLNCD_gput:nn { lang } { tex }
\NLNCD_gput:nn { show_lineno } { T }
\NLNCD_gput:nn { show_name } { T }
\NLNCD_gput:nn { only_top } { T }
\NLNCD_gput:nn { use_margin } { T }
\NLNCD_gput:nn { ignore } { F }
\NLNCD_gput:nn { reset } { F }
\AddToHook { begindocument/end } {
  \prop_if_in:cnF { g/NLNCD/code } { parskip } {
    \exp_args:Nnx
    \NLNCD_gput:nn { parskip } { \the\parskip }
  }
}
\NLNCD_gput:nn { sep } { 4pt plus 2pt minus 2pt }
\NLNCD_gput:nn { .code } {}
\int_new:c { g/NLNCD/lineno/ }
\int_set:cn { g/NLNCD/lineno/ } { 1 }
\int_new:N \g_NLNCD_code_int
\prop_new:N \g_NLNCD_code_prop
\prop_new:N \g_NLNCD_export_prop
\tl_new:N \g_NLNCD_chunks_tl
\tl_new:N \l_NLNCD_chunks_tl
\prop_new:N \g_NLNCD_vars
\tl_new:N \g_NLNCD_hook_tl
\tl_new:N \l_NLNCD_code_tl
\tl_new:N \l_NLNCD_main_tl
\int_new:N \g_NLNCD_int
\tl_new:N \l_NLNCD_line_tl
\tl_new:N \l_NLNCD_lineno_tl
\tl_new:N \l_NLNCD_name_tl
\tl_new:N \l_NLNCD_info_tl
\clist_new:N \l_NLNCD_clist
\ior_new:N \l_NLNCD_in
\iow_new:N \l_NLNCD_out
\cs_new:Npn \NLNCD_clist_map_inline:Nnn #1 #2 #3 {
  \clist_if_empty:NTF #1 { #3 } {
    \clist_map_inline:Nn #1 { #2 }
  }
}
\cs_new:Npn \NLNCD_process_export: {}
\cs_new:Npn \NLNCD_new_conditional:n #1 {
  \exp_last_unbraced:Nx
  \prg_new_conditional:Nnn { \use:c { NLNCD_if_#1: } } { T, F, TF } {
    \group_begin:
    \NLNCD_get:nNTF { #1 } \l_tmpa_tl {
      \exp_args:NnV
      \regex_match:nnTF
      { ^\s*[tTyY] }
      \l_tmpa_tl
      { \group_end: \prg_return_true:  }
      { \group_end: \prg_return_false: }
    } { \group_end: \prg_return_false: }
  }
}
\NLNCD_new_conditional:n { show_name }
\NLNCD_new_conditional:n { show_lineno }
\NLNCD_new_conditional:n { use_margin }
\NLNCD_new_conditional:n { only_top }
\NLNCD_new_conditional:n { ignore }
\NLNCD_new_conditional:n { reset }
\NLNCD_new_conditional:n { export }
\cs_set_eq:NN \NLNCD_new_conditional:n \prg_do_nothing:
\keys_define:nn { NLNCD } {
  lineno .code:n = \NLNCD_put:nn { show_lineno } { #1 },
  lineno .default:n = true,
  name .code:n = \NLNCD_put:nn { show_name } { #1 },
  name .default:n = true,
  only~top .code:n = \NLNCD_put:nn { only_top } { #1 },
  only~top .default:n = true,
  ignore .code:n = \NLNCD_put:nn { ignore } { #1 },
  ignore .default:n = true,
  margin .code:n = \NLNCD_put:nn { use_margin } { #1 },
  margin .default:n = true,
  lang .code:n = \NLNCD_put:nn { lang } { #1 },
  code~format .code:n = \NLNCD_put:nn { format/code } { #1 },
  name~format .code:n = \NLNCD_put:nn { format/name } { #1 },
  lineno~format .code:n = \NLNCD_put:nn { format/lineno } { #1 },
  post~processor .code:n = \NLNCD_put:nn { post_processor } { #1 },
  post~processor~args .code:n = \NLNCD_put:nn { post_processor_args } { #1 },
  sep .code:n = \NLNCD_put:nn { sep } { #1 },
  parskip .code:n = \NLNCD_put:nn { parskip } { #1 },
  test .code:n = \NLNCD_put:nn { test } { #1 },
  unknown .code:n = \PackageWarning
    { inlinecode }
    { Unknown~option~`\l_keys_key_str' },
}
\keys_define:nn { } { NLNCD/set .inherit:n = NLNCD }
\keys_define:nn { NLNCD/set } {
  minted .code:n = {
    \_NLNCD_minted_on:
    \setkeys { minted@opt@g } { #1 }
  },
  minted~style .code:n = {
    \RemoveFromHook { begindocument/before } [NLNCD/Minted]
    \AddToHook { begindocument/before } [NLNCD/Minted] {
      \usemintedstyle { #1 }
    }
  },
  only~description .code:n = \prop_put:Nnn \l_NLNCD_vars
    { only_description } { #1 },
  unknown .code:n = \PackageWarning
    { NLNCD/set }
    { Unknown~option~`\l_keys_key_str' },
}
\NewDocumentCommand \InlineCodeSet { m } {
  \keys_set:nn { NLNCD/set } {#1}
  \NLNCD_if_use_minted:F {
    \bool_if:NT \g_NLNCD_minted_on_bool {
      \sys_if_shell:TF {
        \_NLNCD_if_pygmentize:TF {
          \bool_gset_true:N \g_NLNCD_use_minted_bool
        } {
          \msg_warning:nnn
            { inlinecode }
            { :n }
            { No~"pygmentize"~found. }
        }
      } {
        \msg_warning:nnn
          { inlinecode }
          { :n }
          { No~unrestricted~shell~escape~for~"pygmentize".}
      }
    }
  }
}
\keys_define:nn { } { NLNCD/code .inherit:n = NLNCD }
\keys_define:nn { NLNCD/code } {
  chunks .clist_set:N = \l_NLNCD_clist,
  reset .code:n = \NLNCD_put:nn { reset } { #1 },
  reset .default:n = true,
  unknown .code:n = \PackageWarning
    { NLNCD/code }
    { Unknown~option~`\l_keys_key_str' },
}
\cs_set:Npn \NLNCD_process_export: {
  \tl_put_right:Nx \l_NLNCD_code_tl { \the\verbatim@line \iow_newline: }
}
\DeclareDocumentEnvironment { InlineCode } { m } {
  \clist_clear:N \l_NLNCD_clist
  \keys_set:nn { NLNCD/code } { #1 }
  \clist_map_inline:Nn \l_NLNCD_clist {
    \int_if_exist:cF { g/NLNCD/lineno/##1 } {
      \int_new:c { g/NLNCD/lineno/##1 }
      \int_gset:cn { g/NLNCD/lineno/##1 } 1
      \seq_new:c { g/NLNCD/chunks/##1 }
    }
  }
  \NLNCD_if_reset:T {
    \NLNCD_clist_map_inline:Nnn \l_NLNCD_clist {
      \int_gset:cn { g/NLNCD/lineno/##1 } 1
    } {
      \int_gset:cn { g/NLNCD/lineno/ } 1
    }
  }
  \int_gzero:N \g_NLNCD_int
  \tl_clear:N \l_NLNCD_main_tl
  \clist_map_inline:Nn \l_NLNCD_clist {
    \prop_concat:ccc
      { g/NLNCD/code/ }
      { g/NLNCD/code/##1 }
      { g/NLNCD/code/ }
    \tl_set:Nn \l_NLNCD_main_tl { ##1 }
    \clist_map_break:
  }
  \int_gset:Nn \g_NLNCD_int
    { \int_use:c { g/NLNCD/lineno/\l_NLNCD_main_tl } }
  \tl_clear:N \l_NLNCD_info_tl
  \tl_clear:N \l_NLNCD_name_tl
  \tl_clear:N \l_NLNCD_code_tl
  \tl_clear:N \l_NLNCD_chunks_tl
  \cs_set:Npn \verbatim@processline {
    \NLNCD_process_export:
  }
  \NLNCD_if_show_code:TF {
    \exp_args:NNx
    \skip_set:Nn \parskip { \NLNCD_item:n { parskip } }
    \clist_if_empty:NTF \l_NLNCD_clist {
      \tl_gclear:N \g_NLNCD_chunks_tl
    } {
      \clist_set_eq:NN \l_tmpa_clist \l_NLNCD_clist
      \clist_sort:Nn \l_tmpa_clist {
        \str_compare:nNnTF { ##1 } > { ##2 } {
          \sort_return_swapped:
        } {
          \sort_return_same:
        }
      }
      \tl_set:Nx \l_tmpa_tl { \clist_use:Nn \l_tmpa_clist , }
      \NLNCD_if_show_name:T {
        \NLNCD_if_use_margin:T {
          \NLNCD_if_only_top:T {
            \tl_if_eq:NNT \l_tmpa_tl \g_NLNCD_chunks_tl {
              \tl_gset_eq:NN \g_NLNCD_chunks_tl \l_tmpa_tl
              \tl_clear:N \l_tmpa_tl
            }
          }
          \tl_if_empty:NF \l_tmpa_tl {
            \tl_set:Nx \l_NLNCD_chunks_tl {
              \clist_use:Nn \l_NLNCD_clist ,
            }
            \tl_set:Nn \l_NLNCD_name_tl {
              {
                \NLNCD_item:n { format/name }
                \l_NLNCD_chunks_tl :
                \hspace*{1ex}
              }
            }
          }
        }
        \tl_if_empty:NF \l_tmpa_tl {
          \tl_gset_eq:NN \g_NLNCD_chunks_tl \l_tmpa_tl
        }
      }
    }
    \if_mode_vertical:
    \else:
    \par
    \fi:
    \vspace{ \NLNCD_item:n { sep } }
    \noindent
    \frenchspacing
    \@vobeyspaces
    \normalfont\ttfamily
    \NLNCD_item:n { format/code }
    \hyphenchar\font\m@ne
    \@noligs
    \NLNCD_if_export:F {
      \cs_set_eq:NN \NLNCD_process_export: \prg_do_nothing:
    }
    \NLNCD_if_use_minted:TF {
      \exp_args:Nnx \setkeys { FV } {
        firstnumber=\int_use:c { g/NLNCD/lineno/\l_NLNCD_main_tl },
      }
      \iow_open:Nn \minted@code { \jobname.pyg }
      \cs_set:Npn \verbatim@processline {
        \NLNCD_process_export:
        \group_begin:
        \tl_set:Nx \l_tmpa_tl { \the\verbatim@line }
        \exp_args:NNV \iow_now:Nn \minted@code \l_tmpa_tl
        \group_end:
      }
    } {
      \NLNCD_if_show_lineno:T {
        \NLNCD_if_use_margin:TF {
          \tl_set:Nn \l_NLNCD_info_tl {
            \hbox_overlap_left:n {
              {
                \l_NLNCD_name_tl
                \NLNCD_item:n { format/name }
                \NLNCD_item:n { format/lineno }
                \int_use:N \g_NLNCD_int
                \int_gincr:N \g_NLNCD_int
              }
              \hspace*{1ex}
            }
          }
        } {
          \tl_set:Nn \l_NLNCD_info_tl {
            {
              \NLNCD_item:n { format/name }
              \NLNCD_item:n { format/lineno }
              \hspace*{3ex}
              \hbox_overlap_left:n {
                \int_use:N \g_NLNCD_int
                \int_gincr:N \g_NLNCD_int
              }
            }
            \hspace*{1ex}
          }
        }
      }
      \cs_set:Npn \verbatim@processline {
        \NLNCD_process_export:
        \hspace*{\dimexpr \linewidth-\columnwidth}%
        \hbox_to_wd:nn { \columnwidth } {
          \l_NLNCD_info_tl
          \the\verbatim@line
          \color{lightgray}\dotfill
        }
        \tl_clear:N \l_NLNCD_name_tl
        \par\noindent
      }
    }
  } {
    \@bsphack
  }
  \group_begin:
  \g_NLNCD_hook_tl
  \let \do \@makeother
  \dospecials \catcode `\^^M \active
  \verbatim@start
} {
  \int_gsub:Nn \g_NLNCD_int {
    \int_use:c { g/NLNCD/lineno/\l_NLNCD_main_tl }
  }
  \int_compare:nNnT { \g_NLNCD_int } > { 0 } {
    \NLNCD_clist_map_inline:Nnn \l_NLNCD_clist {
      \int_gadd:cn { g/NLNCD/lineno/##1 } { \g_NLNCD_int }
    } {
      \int_gadd:cn { g/NLNCD/lineno/ } { \g_NLNCD_int }
    }
    \int_gincr:N \g_NLNCD_code_int
    \tl_set:Nx \l_tmpb_tl { \int_use:N \g_NLNCD_code_int }
    \clist_map_inline:Nn \l_NLNCD_clist {
      \seq_gput_right:cV { g/NLNCD/chunks/##1 } \l_tmpb_tl
    }
    \prop_gput:NVV \g_NLNCD_code_prop \l_tmpb_tl \l_NLNCD_code_tl
  }
  \group_end:
  \NLNCD_if_show_code:T {
  }
  \NLNCD_if_show_code:TF {
    \NLNCD_if_use_minted:TF {
      \iow_close:N \minted@code
      \vspace* { \dimexpr -\topsep-\parskip }
      \tl_if_empty:NF \l_NLNCD_info_tl {
        \tl_use:N \l_NLNCD_info_tl
        \skip_vertical:n { \dimexpr -\topsep-\parskip-\baselineskip }
        \par\noindent
      }
      \exp_args:Nx \minted@pygmentize { \NLNCD_item:n { lang } }
      %\DeleteFile { \jobname.pyg }
      \skip_vertical:n { -\topsep-\partopsep }
    } {
      \exp_args:Nx \skip_vertical:n { \NLNCD_item:n { sep } }
      \noindent
      \NLNCD_if_use_minted:T {
        \setkeys { FV } { firstnumber=last, }
        \clist_if_empty:NTF \l_NLNCD_clist {
          \exp_args:Nnx \setkeys { FV } {
            firstnumber=\int_use:c { g/NLNCD/lineno/ },
          }
        } {
          \exp_args:Nnx \setkeys { FV } {
            firstnumber=\int_use:c { g/NLNCD/lineno/\l_NLNCD_main_tl },
          }
        }
      }
    }
  } {
    \@esphack
  }
}
\newenvironment{NLNCD}{
  \def \verbatim@processline {
    \group_begin:
    \NLNCD_processline_code_append:
    \group_end:
  }
} {
  \NLNCD_get:nNTF { lang } \l_tmpa_tl {
    \tl_if_empty:NT \l_tmpa_tl {
      \clist_map_inline:Nn \l_NLNCD_clist {
        \NLNCD_get:nnNT { ##1 } { lang } \l_tmpa_tl {
          \tl_if_empty:NF \l_tmpa_tl {
            \clist_map_break:
          }
        }
      }
      \tl_if_empty:NT \l_tmpa_tl {
        \tl_set:Nn \l_tmpa_tl { tex }
      }
    }
  } {
    \tl_set:Nn \l_tmpa_tl { tex }
  }
  \clist_map_inline:Nn \l_NLNCD_clist {
    \NLNCD_gput:nnV { ##1 } { lang } \l_tmpa_tl
  }
}
\newenvironment{NLNCD_M}{
  \setkeys { FV } { firstnumber=last, }
  \clist_if_empty:NTF \l_NLNCD_clist {
    \exp_args:Nnx \setkeys { FV } {
      firstnumber=\int_use:c { g/NLNCD/lineno/ },
  } } {
    \clist_map_inline:Nn \l_NLNCD_clist {
      \exp_args:Nnx \setkeys { FV } {
        firstnumber=\int_use:c { g/NLNCD/lineno/##1 },
      }
      \clist_map_break:
  } }
  \iow_open:Nn \minted@code { \jobname.pyg }
  \tl_set:Nn \l_NLNCD_line_tl {
    \tl_set:Nx \l_tmpa_tl { \the\verbatim@line }
    \exp_args:NNV \iow_now:Nn \minted@code \l_tmpa_tl
  }
} {
  \NLNCD_if_show_code:T {
    \NLNCD_if_use_minted:TF {
      \iow_close:N \minted@code
      \vspace* { \dimexpr -\topsep-\parskip }
      \tl_if_empty:NF \l_NLNCD_info_tl {
        \tl_use:N \l_NLNCD_info_tl
        \vspace* { \dimexpr -\topsep-\parskip-\baselineskip }
        \par\noindent
      }
      \exp_args:NV \minted@pygmentize \l_tmpa_tl
      \DeleteFile { \jobname.pyg }
      \vspace* { \dimexpr -\topsep -\partopsep }
    } {
      \@esphack
    }
  }
}
\newenvironment{NLNCD_P}{
  \if_mode_vertical:
    \noindent
  \else
    \vspace*{ \topsep }
    \par\noindent
  \fi
  \NLNCD_gset_chunks:
  \tl_if_empty:NTF \g_NLNCD_chunks_tl {
    \NLNCD_if_show_lineno:TF {
      \NLNCD_if_use_margin:TF {
        \tl_set:Nn \l_NLNCD_info_tl {
          \hbox_overlap_left:n {
            \NLNCD_item:n { format/code }
            {
              \NLNCD_item:n { format/name }
              \NLNCD_item:n { format/lineno }
              \clist_if_empty:NTF \l_NLNCD_clist {
                \int_use:c { g/NLNCD/lineno/ }
              } {
                \clist_map_inline:Nn \l_NLNCD_clist {
                  \int_use:c { g/NLNCD/lineno/##1 }
                  \clist_map_break:
                }
              }
            }
            \hspace*{1ex}
          }
        }
      } {
        \tl_set:Nn \l_NLNCD_info_tl {
          {
            \NLNCD_item:n { format/code }
            {
              \NLNCD_item:n { format/name }
              \NLNCD_item:n { format/lineno }
              \hspace*{3ex}
              \hbox_overlap_left:n {
                \clist_if_empty:NTF \l_NLNCD_clist {
                  \int_use:c { g/NLNCD/lineno/ }
                } {
                  \clist_map_inline:Nn \l_NLNCD_clist {
                    \int_use:c { g/NLNCD/lineno/##1 }
                    \clist_map_break:
                  }
                }
              }
              \hspace*{1ex}
            }
          }
        }
      }
    } {
      \tl_clear:N \l_NLNCD_info_tl
    }
  } {
    \NLNCD_if_show_lineno:TF {
      \tl_set:Nn \l_NLNCD_info_tl {
        \hbox_overlap_left:n {
          \NLNCD_item:n { format/code }
          {
            \NLNCD_item:n { format/name }
            \g_NLNCD_chunks_tl :
            \hspace*{1ex}
            \NLNCD_item:n { format/lineno }
            \clist_map_inline:Nn \l_NLNCD_clist {
              \int_use:c { g/NLNCD/lineno/####1 }
              \clist_map_break:
            }
          }
          \hspace*{1ex}
        }
        \tl_set:Nn \l_NLNCD_info_tl {
          \hbox_overlap_left:n {
            \NLNCD_item:n { format/code }
            {
              \NLNCD_item:n { format/name }
              \NLNCD_item:n { format/lineno }
              \clist_map_inline:Nn \l_NLNCD_clist {
                \int_use:c { g/NLNCD/lineno/####1 }
                \clist_map_break:
              }
            }
            \hspace*{1ex}
          }
        }
      }
    } {
      \tl_set:Nn \l_NLNCD_info_tl {
        \hbox_overlap_left:n {
          \NLNCD_item:n { format/code }
          {
            \NLNCD_item:n { format/name }
            \g_NLNCD_chunks_tl :
          }
          \hspace*{1ex}
        }
        \tl_clear:N \l_NLNCD_info_tl
      }
    }
  }
  \NLNCD_if_use_minted:F {
    \tl_set:Nn \l_NLNCD_line_tl {
      \noindent
      \hbox_to_wd:nn { \textwidth } {
        \tl_use:N \l_NLNCD_info_tl
        \NLNCD_item:n { format/code }
        \the\verbatim@line
        \hfill
      }
      \par
    }
    \@bsphack
  }
} {
  \vspace*{ \topsep }
  \par
  \@esphack
}
\keys_define:nn { } { NLNCD/export .inherit:n = NLNCD/code }
\keys_define:nn { NLNCD/export } {
  file .tl_set:N = \l_NLNCD_tl,
  file .value_required:n = true,
  preamble .code:n = \prop_put:Nnn \l_NLNCD_vars { preamble } { #1 },
  raw .code:n = \prop_put:Nnn \l_NLNCD_vars { raw } { #1 },
  unknown .code:n = \PackageWarning
    { NLNCD/export }
    { Unknown~option~`\l_keys_key_str' },
}
\DeclareDocumentCommand \InlineCodeExport { m } {
  \group_begin:
  \clist_clear:N \l_NLNCD_clist
  \prop_clear:c { g/NLNCD/code/ }
  \prop_put:cnn { g/NLNCD/code/ } { lang } { tex }
  \keys_set:nn { NLNCD/export } { #1 }
  \prop_gput:NVV \g_NLNCD_export_prop \l_NLNCD_tl \l_NLNCD_clist
  \prop_gput:cnV { g/NLNCD/export/\l_NLNCD_tl } { chunks } \l_NLNCD_clist
  \prop_gput:cnx { g/NLNCD/export/\l_NLNCD_tl } { preamble }
    { \prop_item:Nn \l_NLNCD_vars { preamble } }
  \bool_set:Nx \l_tmpa_bool { \prop_item:Nn \l_NLNCD_vars { raw } }
  \prop_gput:cnV { g/NLNCD/export/\l_NLNCD_tl } { preamble } \l_tmpa_bool
  \NLNCD_get:nNT { lang } \l_tmpa_tl {
    \clist_map_inline:Nn \l_NLNCD_clist {
      \prop_gconcat:ccc
        { g/NLNCD/code/##1 }
        { g/NLNCD/code/##1 }
        { g/NLNCD/code/ }
    }
  }
  \group_end:
}
\AddToHook { enddocument / end } {
  \group_begin:
  \prop_map_inline:Nn \g_NLNCD_export_prop {
    \iow_open:Nn \l_NLNCD_out { #1 }
    \iow_term:x { Exporting~chunks~#2~to~#1 }
    \prop_get:cnNF { g/NLNCD/export/#1 } { raw } \l_tmpa_bool {
      \bool_set_false:N \l_tmpa_bool
    }
    \bool_if:NF \l_tmpa_bool {
      \prop_get:cnNT { g/NLNCD/export/#1 } { preamble } \l_tmpa_tl {
        \prop_get:cnNF { g/NLNCD/export/#1 } { lang } \l_tmpa_str {
          \str_set:Nn \l_tmpa_str { tex }
        }
        \prop_get:NVNTF \c_NLNCD_comment_prop \l_tmpa_str \l_tmpa_str {
          \tl_set:Nn \l_tmpb_tl {
            \l_tmpa_str\l_tmpa_str\space\space
          }
        } {
          \tl_clear:N \l_tmpb_tl
        }
        \tl_put_right:Nx \l_tmpb_tl {
          This~is~file~`#1'~
          generated~from~`\c_sys_jobname_str.tex'~on~\DTMnow.
        }
        \iow_now:Nx \l_NLNCD_out { \l_tmpb_tl }
        \iow_now:Nx \l_NLNCD_out { \l_tmpa_tl }
      }
    }
    \clist_map_inline:nn { #2 } {
      \NLNCD_get:nnNT { ##1 } { .code } \l_tmpa_tl {
        \exp_args:NNV \iow_now:Nn \l_NLNCD_out \l_tmpa_tl
      }
    }
    \iow_close:N \l_NLNCD_out
  }
  \group_end:
}
\bool_new:N \g_NLNCD_in_impl_bool
\prg_new_conditional:Nnn \NLNCD_if_show_code: { T, F, TF } {
  \bool_if:nTF {
    \g_NLNCD_in_impl_bool && !\g_NLNCD_with_impl_bool
  } {
    \prg_return_false:
  } {
    \prg_return_true:
  }
}
\bool_new:N \g_NLNCD_with_impl_bool
\msg_new:nnn { inlinecode } { :n } { #1 }
\bool_new:N \g_NLNCD_minted_on_bool
\bool_new:N \g_NLNCD_use_minted_bool
\prg_new_conditional:Nnn \NLNCD_if_use_minted: { T, F, TF } {
  \bool_if:NTF \g_NLNCD_use_minted_bool
    { \prg_return_true:  }
    { \prg_return_false: }
}
\prg_new_conditional:Nnn\_NLNCD_if_pygmentize: { T, F, TF } {
  \group_begin:
  \sys_get_shell:nnN {which~pygmentize} {} \l_tmpa_tl
  \tl_if_empty:NTF \l_tmpa_tl {
    \tl_set:Nn \l_tmpa_tl { \prg_return_false: }
  } {
    \tl_set:Nn \l_tmpa_tl { \prg_return_true: }
  }
  \exp_last_unbraced:NV
  \group_end: \l_tmpa_tl
}
\cs_set:Npn \_NLNCD_minted_on: {
  \bool_gset_true:N \g_NLNCD_minted_on_bool
  \RequirePackage{minted}
  \setkeys{ minted@opt@g } { linenos=false }
  \minted@def@opt{post~processor}
  \minted@def@opt{post~processor~args}
  \pretocmd\minted@inputpyg{
    \NLNCD@postprocesspyg {\minted@outputdir\minted@infile}
  }{}{\fail}
  \newcommand{\NLNCD@postprocesspyg}[1]{%
    \group_begin:
    \tl_set:Nx \l_tmpa_tl {\NLNCD_item:n { post_processor } }
    \tl_if_empty:NF \l_tmpa_tl {
      \tl_set:Nx \l_tmpb_tl {\NLNCD_item:n { post_processor_args } }
      \exp_args:Nx
      \sys_shell_now:n {
        python3\space
        \l_tmpa_tl\space
        ##1\space
        \l_tmpb_tl
      }
    }
    \group_end:
  }
}
\ProvideDocumentCommand{\InlineCodeEmph}{m}{\textcolor{red}{#1}}
\DeclareDocumentCommand \InlineCodeStorePreamble { m m } {
  \group_begin:
  \msg_info:nnn
    { inlinecode }
    { :n }
    { Reading~preamble~from~file~"#2". }
  \tl_clear:N \g_tmpa_tl
  \tl_clear:N \g_tmpb_tl
  \ior_open:Nn \l_NLNCD_in { #2 }
  \bool_until_do:nn { \ior_if_eof_p:N \l_NLNCD_in } {
    \ior_str_get:NN \l_NLNCD_in \l_tmpa_tl
    \tl_if_empty:NTF \l_tmpa_tl {
      \tl_put_right:Nn \g_tmpb_tl { \iow_newline: }
    } {
      \tl_put_right:Nx \g_tmpa_tl { \g_tmpb_tl }
      \tl_set:Nn \g_tmpb_tl { \iow_newline: }
      \tl_put_right:NV \g_tmpa_tl \l_tmpa_tl
    }
  }
  \ior_close:N \l_NLNCD_in
  \exp_args:NNNx
  \group_end:
  \tl_set:Nn #1 { \tl_to_str:N \g_tmpa_tl }
}
\newcounter{NLNCD@impl@page}
\DeclareDocumentCommand \InlineCodeImplementation {} {
  \bool_if:NF \g_NLNCD_with_impl_bool {
    \clearpage
    \bool_gset_true:N \g_NLNCD_in_impl_bool
    \let\NLNCD@old@part\part
    \DeclareDocumentCommand\part{som}{}
    \let\NLNCD@old@section\section
    \DeclareDocumentCommand\section{som}{}
    \let\NLNCD@old@subsection\subsection
    \DeclareDocumentCommand\subsection{som}{}
    \let\NLNCD@old@subsubsection\subsubsection
    \DeclareDocumentCommand\subsubsection{som}{}
    \let\NLNCD@old@paragraph\paragraph
    \DeclareDocumentCommand\paragraph{som}{}
    \let\NLNCD@old@subparagraph\subparagraph
    \DeclareDocumentCommand\subparagraph{som}{}
    \cs_if_exist:NT \refsection{ \refsection }
    \setcounter{ NLNCD@impl@page }{ \value{page} }
  }
}
\DeclareDocumentCommand\InlineCodeFinale {} {
  \bool_if:NF \g_NLNCD_with_impl_bool {
    \clearpage
    \bool_gset_false:N \g_NLNCD_in_impl_bool
    \let\part\NLNCD@old@part
    \let\section\NLNCD@old@section
    \let\subsection\NLNCD@old@subsection
    \let\subsubsection\NLNCD@old@subsubsection
    \let\paragraph\NLNCD@old@paragraph
    \let\subparagraph\NLNCD@old@subparagraph
    \setcounter { page } { \value{ NLNCD@impl@page } }
  }
}
\cs_set_eq:NN \NLNCD_line_number: \prg_do_nothing:
\AddToHook { cmd/FancyVerbFormatLine/before } {
  \NLNCD_line_number:
}
\AddToHook { shipout/before } {
  \tl_gclear:N \g_NLNCD_chunks_tl
}
\InlineCodeSet {}
%% 
%% Copyright (C) 2022 by Jérôme LAURENS <jerome.laurens@u-bourgogne.fr>
%% 
%% This work may be distributed and/or modified under the
%% conditions of the LaTeX Project Public License (LPPL), either
%% version 1.3c of this license or (at your option) any later
%% version.  The latest version of this license is in the file:
%% 
%% http://www.latex-project.org/lppl.txt
%% 
%% This work is "maintained" (as per LPPL maintenance status) by
%% Jérôme LAURENS.
%% 
%% This work consists of the file  inlinecode.dtx
%% and the derived files           inlinecode.ins,
%%                                 inlinecode.pdf and
%%                                 inlinecode.sty.
%% 
%%
%% End of file `inlinecode.sty'.

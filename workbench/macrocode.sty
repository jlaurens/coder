% !TeX root=...
%%
%% This is file `macrocode.sty',
%% soon generated with the docstrip utility.
%%
%% The original source files were:
%%
%% macrocode.dtx (with options: `sty')
%% 
%% macrocode documentation class
%%
%% Copyright (C) 2021 by Jérôme Laurens <jerome.laurens@u-bourgogne.fr>
%%
%% This work may be distributed and/or modified under the
%% conditions of the LaTeX Project Public License, either version 1.3
%% of this license or (at your option) any later version.
%% The latest version of this license is in
%%  http://www.latex-project.org/lppl.txt
%% and version 1.3 or later is part of all distributions of LaTeX
%% version 2005/12/01 or later.
%%
%% This work has the LPPL maintenance status `maintained'.
%%
%% The Current Maintainer of this work is Jérôme Laurens.
%%
%% This work consists of the files macrocode.dtx
\ProvidesExplPackage{macrocode}
  {2022/01/21}
  {1.0a}
  {macrocode package}

\msg_new:nnn { macrocode } { :n } { #1 }

\bool_new:N \g__macrocode_minted_bool
\bool_gset_false:N \g__macrocode_minted_bool

\bool_new:N \g__macrocode_use_minted_bool
\bool_gset_false:N \g__macrocode_use_minted_bool

\bool_new:N \g__macrocode_in_example_bool
\bool_gset_false:N \g__macrocode_in_example_bool

\bool_new:N \g__macrocode_with_implementation_bool
\bool_gset_true:N \g__macrocode_with_implementation_bool

\bool_new:N \g__macrocode_in_implementation_bool
\bool_gset_false:N \g__macrocode_in_implementation_bool

\prg_new_conditional:Nnn\__macrocode_if_print_code: { T } {
  \bool_if:nTF {
    \g__macrocode_in_implementation_bool &&
    !\g__macrocode_with_implementation_bool
  } {
    \prg_return_false:
  } {
    \prg_return_true:
  }
}

\prg_new_conditional:Nnn \__macrocode_if_use_minted: {
  T, F, TF
}{
  \bool_if:NTF \g__macrocode_use_minted_bool {
    \prg_return_true:
  } {
    \prg_return_false:
  }
}

\tl_new:N \g__macrocode_post_processor_tl
\tl_new:N \g__macrocode_post_processor_args_tl
  
\makeatletter
\keys_define:nn { macrocode } {
  sty .code:n = \str_set:Nx \g__macrocode_sty_str { #1 },
  sty .default:x = \c_sys_jobname_str,
  sty .initial:n = ,
  minted~style .code:n = \AddToHook { begindocument/before } {
    \usemintedstyle { #1 }
  },
  minted .code:n = {
    \bool_set_true:N \g__macrocode_minted_bool
    \RequirePackage{minted}
    \setkeys { minted@opt@g } { #1 }
    \minted@def@opt{post~processor}
    \minted@def@opt{post~processor~args}
    \pretocmd\minted@inputpyg{%
      \macrocode@postprocesspyg
        {\minted@outputdir\minted@infile}%
    }{}{\fail}
% #1 = name of the python script, e.g., "process.py"
% #2 = input ".pygtex" file, always be "\minted@outputdir\minted@infile"
    % #3 = more args passed to the python script, possibly empty
    \newcommand{\macrocode@postprocesspyg}[1]{%
      \tl_if_empty:NTF \g__macrocode_post_processor_tl {
        DEBUG:~NO~POST~PROCESSING
      } {
        % execute "python3 <script.py> <file.pygtex> <more_args>"
         \exp_args:Nx
         \sys_shell_now:n {
           python3\space
           \g__macrocode_post_processor_tl\space
           ##1\space
           \g__macrocode_post_processor_args_tl
         }  
      }
    }
  },
  post~processor .tl_set_x:N = \g__macrocode_post_processor_tl,
  post~processor~args .tl_set_x:N = \g__macrocode_post_processor_args_tl,
  font .tl_set:N = \g__macrocode_font_tl,
  font .initial:n = \ttfamily,
  unknown .code:n = \PackageWarning
    { macrocode }
    { Unknown~option~`\l_keys_key_str' },
}

\newcommand{\MacroCodeEmph}[1]{\textcolor{red}{#1}}

\NewDocumentCommand \MacroCodeSetup { m } {
  \keys_set:nn {macrocode} {#1}
  \str_if_empty:NF \g__macrocode_sty_str {
    \file_if_exist:nT { \g__macrocode_sty_str.sty } {
      \RequirePackage{ \g__macrocode_sty_str }
    }
  }
  \bool_if:NF \g__macrocode_use_minted_bool {
    \bool_if:NT \g__macrocode_minted_bool {
      \sys_if_shell:TF {
        \__macrocode_if_pygmentize:TF {
          \bool_gset_true:N \g__macrocode_use_minted_bool
          \RequirePackage{minted}
          \renewcommand { \theFancyVerbLine } {
            \g__macrocode_font_tl \scriptsize
            \textcolor { lightgray } {
              \arabic { FancyVerbLine }
            }
          }
        } {
          \msg_warning:nnn
            { macrocode }
            { :n }
            { No~"pygmentize"~found. }
        }
      } {
        \msg_warning:nnn
          { macrocode }
          { :n }
          { No~unrestricted~shell~escape~for~"pygmentize".}
      }
    }
  }
}
\MacroCodeSetup {}
\AddToHook { begindocument/before } {
}

\prg_new_conditional:Nnn\__macrocode_if_pygmentize:{T,F,TF}{
  \group_begin:
  \sys_get_shell:nnN {which~pygmentize} {} \l_tmpa_tl
  \tl_if_empty:NTF \l_tmpa_tl {
    \tl_set:Nn \l_tmpa_tl { \prg_return_false: }
  } {
    \tl_set:Nn \l_tmpa_tl { \prg_return_true: }
  }
  \exp_last_unbraced:NV
  \group_end:
  \l_tmpa_tl
}

\ior_new:N \g__macrocode_in
\iow_new:N \g__macrocode_out

\prop_new:N \g__macrocode_files_prop
\prop_new:N \g__macrocode_out_prop
\prop_new:N \g__macrocode_chunks_prop

\DeclareDocumentCommand \MacroCodeNewChunk { m } {
  \exp_args:Nx
  \prop_set:Nnn \g__macrocode_chunks_prop { #1 } {}
}

% #2 file name
% #3 clist of chunk keys
\DeclareDocumentCommand \MacroCodeFile{ O{} m m }{
  \group_begin:
  \keys_define:nn { MacroCodeFile } {
    key .initial:x = #2,
    key .tl_set_x:N = \g_tmpa_tl,
    preamble .initial:n = ,
    preamble .code:n = \str_set:Nx \g_tmpb_tl { ##1 },
  }
  \exp_args:Nnx
  \keys_set:nn { MacroCodeFile } { #1 }
  \exp_args:NNV
  \prop_if_in:NnTF
    \g__macrocode_out_prop \g_tmpa_tl {
    \msg_critical:nnx
      { macrocode }
      { :n }
      { Duplicate~file "\g_tmpa_tl'' }
  } {
    \int_zero_new:c {
      macrocode@lineno@\g_tmpa_tl
    }    
  }
  \prop_gput:NVx \g__macrocode_files_prop \g_tmpa_tl { #3 }
  \clist_set:Nn \l_tmpa_clist { #3 }
  \clist_put_left:Nx \l_tmpa_clist { \space \g_tmpa_tl }
  \prop_gput:NVx \g__macrocode_out_prop \g_tmpa_tl { \clist_use:Nn \l_tmpa_clist , }  
  \str_set:Nx \l_tmpa_str { \str_head:N \g_tmpb_tl }
  \str_if_empty:NT \l_tmpa_str {
    \str_set_eq:NN \l_tmpa_str \c_percent_str
  }
  \tl_set:Nx \l_tmpb_tl {
    \l_tmpa_str\l_tmpa_str\space\space
    This~is~file~`#2',~generated~from~`\c_sys_jobname_str.tex'~with~key~`\g_tmpa_tl'.^^J
  }
  \tl_if_empty:NF \g_tmpb_tl {
    \tl_gput_right:NV \l_tmpb_tl \g_tmpb_tl
  }
  \prop_gput:NxV \g__macrocode_files_prop { \space \g_tmpa_tl } \l_tmpb_tl
  \group_end:
}

\AddToHook { enddocument/end } {
  \group_begin:
  \prop_map_inline:Nn \g__macrocode_files_prop {
   \iow_open:Nn \g__macrocode_out {#2}
   \prop_get:NnN \g__macrocode_out_prop { #1 } \l_tmpa_tl
   \exp_args:NV
   \clist_map_inline:nn \l_tmpa_tl {
     \prop_get:NnN \g__macrocode_chunks_prop { ##1 } \l_tmpb_tl
     \exp_args:NNV
     \iow_now:Nn \g__macrocode_out \l_tmpb_tl
   }
   \iow_close:N \g__macrocode_out
  }
  \group_end:
}

\DeclareDocumentEnvironment {macrocode@verbatim} {mm} {%
  \clist_set:Nx \l_tmpa_clist {#2}
  \clist_map_inline:Nn \l_tmpa_clist {
    \prop_if_in:NnF \g__macrocode_files_prop { ##1 } {
      \msg_critical:nnn
        { macrocode }
        { :n }
        { Unknown~file~key~"##1". }
    }
    \int_compare:nNnT { \int_use:c {macrocode@lineno@##1} }=\c_zero_int {
      \int_gincr:c { macrocode@lineno@##1 }
    }
  }
  \__macrocode_if_print_code:T {
    \bool_if:NF \g__macrocode_in_example_bool {
      \IfBooleanF { #1 } {
        \makebox [0mm] [r] {
          \g__macrocode_font_tl
          \scriptsize\color{gray}
          $\langle$#2$\rangle$
          \hspace{6ex}
        }
      }
    }
    \__macrocode_if_use_minted:TF {
      \bool_if:NF \g__macrocode_in_example_bool {
        \setkeys{ minted@opt@g } { linenos }
      }
      \setkeys { FV } {
        firstnumber=last,
      }
      \iow_open:Nn \minted@code { \jobname.pyg }
      \Needspace* { 2\baselineskip }
    } {
      \bool_if:NF \g__macrocode_in_example_bool {
        \@bsphack
      }
    }
  }
  \def\verbatim@processline {
    \clist_map_inline:Nn \l_tmpa_clist {
      \tl_gput_right:cx
        { macrocode@output@####1 }
        { \the\verbatim@line \iow_newline: }
    }
    \__macrocode_if_print_code:T {
      \__macrocode_if_use_minted:TF {
        \iow_now:Nx \minted@code { \the\verbatim@line }
      } {
        \noindent\leavevmode
        \bool_if:NF \g__macrocode_in_example_bool {
          \hspace*{-5ex}
        }
        \begin{minipage}[c][1ex]{\textwidth}
          \bool_if:nF{
            \g__macrocode_in_example_bool &&
            !\int_compare_p:nNn
              { \clist_count:N \l_tmpa_clist }>\c_one_int
          } {
            \makebox[4ex]{%
              \leavevmode
              \sffamily\tiny\color{lightgray}\hfill%
              \clist_map_inline:Nn \l_tmpa_clist {
                \int_use:c { macrocode@lineno@####1 }
              }
            }
            \hspace* { 1ex }
          } {
            \g__macrocode_font_tl
            \the\verbatim@line
          }
        \end{minipage}
        \par
      }
    }
    \prop_map_inline:Nn \g__macrocode_files_prop {
      \int_gincr:c { macrocode@lineno@####1 }
    }
  }
  \group_begin:
  \let \do \@makeother
  \dospecials \catcode `\^^M \active
  \__macrocode_if_print_code:T {
    \__macrocode_if_use_minted:F {
      \frenchspacing\@vobeyspaces
     }
  }
  \verbatim@start
} {
  \group_end:
  \__macrocode_if_print_code:T {
    \__macrocode_if_use_minted:TF {
      \iow_close:N \minted@code
      \bool_if:NF \g__macrocode_in_example_bool {
        \vspace* { \dimexpr -\topsep-\partopsep-\parskip }
      }
      \minted@pygmentize { latex }
      \DeleteFile { \jobname.pyg }
      \vspace* { \dimexpr -\topsep -\partopsep }
    } {
      \bool_if:NF\g__macrocode_in_example_bool {
        \@esphack
      }
    }
  }
}

\DeclareDocumentEnvironment { MacroCode } { sm } {
  \__macrocode_if_print_code:T {
    \vspace { -\baselineskip }
    \vspace { 0.25\baselineskip }
    \par\noindent
    \__macrocode_if_use_minted:T {
      \vspace*{ -\baselineskip }
    }
    \def \macrocode_line_number: {
      \makebox [0mm] [r] {
        \g__macrocode_font_tl \scriptsize
        \textcolor { lightgray } {
          \arabic { FancyVerbLine }
        }
        \hspace {1.5ex}
      }
    }
  }
  \macrocode@verbatim{#1}{#2}
} {
  \endmacrocode@verbatim
  \__macrocode_if_print_code:T {
    \vspace{ .2\baselineskip }
    \par\noindent
  }
}

\DeclareDocumentCommand \MacroCodeStorePreamble { m m } {
  \group_begin:
  \msg_info:nnn
    { macrocode }
    { :n }
    { Reading~preamble~from~file~"#2". }
  \tl_clear:N \g_tmpa_tl
  \ior_open:Nn \g__macrocode_in { #2 }
  \bool_until_do:nn { \ior_if_eof_p:N \g__macrocode_in } {
    \tl_if_empty:NF \g_tmpa_tl {
      \tl_put_right:Nx\g_tmpa_tl { \iow_newline: }
    }
    \ior_str_get:NN \g__macrocode_in \l_tmpa_tl
    \exp_args:Nxx
    \str_if_eq:nnTF { \str_head:N \l_tmpa_tl } { \c_percent_str } {
      \tl_put_right:NV \g_tmpa_tl \l_tmpa_tl
    } {
      \ior_close:N \g__macrocode_in
    }
  }
  \ior_close:N \g__macrocode_in
  \exp_args:NNNx
  \group_end:
  \tl_set:Nn #1 { \tl_to_str:N \g_tmpa_tl }
  \typeout{#1}
}

\DeclareDocumentCommand \MacroCodeStoreSelfPreamble { m } {
  \MacroCodeStorePreamble #1 { \c_sys_jobname_str }
}

\dim_const:Nn \c__macrocode_example_margin_dim {
  0.5\baselineskip
}
\dim_const:Nn \c__macrocode_example_linewidth_dim { 1pt }
\coffin_new:N \l__macrocode_example_code_coffin
\coffin_new:N \l__macrocode_example_divider_coffin
\coffin_new:N \l__macrocode_example_result_coffin

\DeclareDocumentEnvironment{example}{}{
  \bool_gset_true:N \g__macrocode_in_example_bool%
  \minisec{Example:}%
  \int_zero_new:c{macrocode@output@macrocode@private@example@line}%
  \tl_if_exist:cTF{macrocode@output@macrocode@private@example}{
    \tl_clear:c{macrocode@output@macrocode@private@example}
  }{
    \tl_new:c{macrocode@output@macrocode@private@example}
  }
  \dim_set:Nn\l_tmpa_dim{ \textwidth/2
              -\c__macrocode_example_margin_dim
              -\c__macrocode_example_linewidth_dim/2}
  \coffin_clear:N \l__macrocode_example_code_coffin
  \vcoffin_set:Nnw\l__macrocode_example_code_coffin{\l_tmpa_dim}
  \macrocode@verbatim{}{macrocode@private@example}
}{
  \endmacrocode@verbatim
  \vcoffin_set_end:
  \coffin_clear:N \l__macrocode_example_result_coffin
  \vcoffin_set:Nnw\l__macrocode_example_result_coffin{\l_tmpa_dim}
  \iow_open:Nn\g__macrocode_out{\jobname.macrocode.tmp}
  \iow_now:Nx\g__macrocode_out{\tl_to_str:c{macrocode@output@macrocode@private@example}}
  \iow_close:N \g__macrocode_out
  \input{\jobname.macrocode.tmp}
  \vcoffin_set_end:
  \coffin_clear:N \l__macrocode_example_divider_coffin
  \dim_set:Nn\l_tmpa_dim{
    \dim_max:nn{\coffin_ht:N \l__macrocode_example_code_coffin}%
          {\coffin_ht:N \l__macrocode_example_result_coffin}
    + 2\c__macrocode_example_margin_dim}
  \hcoffin_set:Nn\l__macrocode_example_divider_coffin{
    \color{lightgray}
    \hspace*{\c__macrocode_example_margin_dim}
    \rule{\c__macrocode_example_linewidth_dim}{\l_tmpa_dim}
    \hspace*{\c__macrocode_example_margin_dim}
  }
  \coffin_clear:N \l_tmpa_coffin
  \coffin_set_eq:NN \l_tmpa_coffin\l__macrocode_example_divider_coffin
  \coffin_join:NnnNnnnn\l_tmpa_coffin{l}{vc}%
             \l__macrocode_example_result_coffin{r}{vc}%
             {0pt}{0pt}
  \coffin_join:NnnNnnnn\l_tmpa_coffin{r}{vc}%
             \l__macrocode_example_code_coffin{l}{vc}%
             {0pt}{0pt}
  \coffin_typeset:Nnnnn\l_tmpa_coffin{T}{l}{0pt}{0pt}
  \bool_gset_false:N \g__macrocode_in_example_bool%
  \vspace*{\c__macrocode_example_margin_dim}\par
}

\newcounter{macrocode@impl@page}

\DeclareDocumentCommand \MacroCodeOnlyDescription {} {
  \bool_gset_false:N \g__macrocode_with_implementation_bool
}

\DeclareDocumentCommand \MacroCodeImplementation {} {
  \bool_if:NF \g__macrocode_with_implementation_bool {
    \clearpage
    \bool_gset_true:N \g__macrocode_in_implementation_bool
    \let\macrocode@old@part\part
    \DeclareDocumentCommand\part{som}{}
    \let\macrocode@old@section\section
    \DeclareDocumentCommand\section{som}{}
    \let\macrocode@old@subsection\subsection
    \DeclareDocumentCommand\subsection{som}{}
    \let\macrocode@old@subsubsection\subsubsection
    \DeclareDocumentCommand\subsubsection{som}{}
    \let\macrocode@old@paragraph\paragraph
    \DeclareDocumentCommand\paragraph{som}{}
    \let\macrocode@old@subparagraph\subparagraph
    \DeclareDocumentCommand\subparagraph{som}{}
    \cs_if_exist:NT \refsection{ \refsection }
    \setcounter{ macrocode@impl@page }{ \value{page} }
  }
}

\DeclareDocumentCommand\MacroCodeFinale {} {
  \bool_if:NF \g__macrocode_with_implementation_bool {
    \clearpage
    \bool_gset_false:N \g__macrocode_in_implementation_bool
    \let\part\macrocode@old@part
    \let\section\macrocode@old@section
    \let\subsection\macrocode@old@subsection
    \let\subsubsection\macrocode@old@subsubsection
    \let\paragraph\macrocode@old@paragraph
    \let\subparagraph\macrocode@old@subparagraph
    \setcounter { page } { \value{ macrocode@impl@page } }
  }
}
\let \macrocode_line_number: \relax
\AddToHook { cmd/FancyVerbFormatLine/before } {
  \macrocode_line_number:
}
\endinput
%%
%% End of file `macrocode.sty'.
